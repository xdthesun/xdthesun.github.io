<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python修改yaml文件</title>
      <link href="/2020/01/03/python%E4%BF%AE%E6%94%B9yaml%E6%96%87%E4%BB%B6-md/"/>
      <url>/2020/01/03/python%E4%BF%AE%E6%94%B9yaml%E6%96%87%E4%BB%B6-md/</url>
      
        <content type="html"><![CDATA[<p>在修改gitlab上工程代码后，重新生成一个分支后，再次触发pipeline，但是由于<code>.gitlab-ci.yml</code>文件中配置了only，导致新生成的分支无法触发pipeline，最先想到的是对<code>.gitlab-ci.yml</code>文件当作普通文件处理，这样对于文件的解析要求比较高，后查到有现成的yaml文件解析库，果断使用之。</p><a id="more"></a><p>开始前首先安装yaml库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>在需要的地方引入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br></pre></td></tr></table></figure><h1 id="读取yaml文件"><a href="#读取yaml文件" class="headerlink" title="读取yaml文件"></a>读取yaml文件</h1><ol><li>和普通的文件读取一样，首先需要获取文件的对象</li><li>使用yaml.load(fp) 获取文件中的内容，返回格式为字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">dict_data = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"log/test.yml"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 返回字典格式的数据</span></span><br><span class="line">    dict_data = yaml.load(f, Loader=yaml.FullLoader)</span><br><span class="line">print(dict_data)</span><br></pre></td></tr></table></figure>yaml文件内容如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">prepare</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"><span class="comment">#  - test</span></span><br><span class="line"><span class="comment">#  - deploy</span></span><br><span class="line"><span class="attr">prepare:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">prepare</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">med</span> <span class="string">prepare</span> <span class="string">-n</span> <span class="string">prepare</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">med</span> <span class="string">build</span> <span class="string">-n</span> <span class="string">release</span></span><br></pre></td></tr></table></figure>输入如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'stages'</span>: [<span class="string">'prepare'</span>, <span class="string">'build'</span>], <span class="string">'prepare'</span>: &#123;<span class="string">'stage'</span>: <span class="string">'prepare'</span>, <span class="string">'script'</span>: [<span class="string">'med prepare -n prepare'</span>]&#125;, <span class="string">'build'</span>: &#123;<span class="string">'stage'</span>: <span class="string">'build'</span>, <span class="string">'script'</span>: [<span class="string">'med build -n release'</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>可以看到yaml文件中的一个文本块的key对应字典中的key值，对于使用 <code>-</code>标识的内容，在字典中会以数组的形式存在</li></ol><p>load文件的几种模式</p><ul><li>BaseLoader 载入大部分的基础YAML</li><li>SafeLoader 载入YAML的子集，推荐在不可信的输入时使用</li><li>FullLoader 这是默认的载入方式，载入全部YAML</li><li>UnsafeLoader 老版本的载入方式</li></ul><p>load文件时若不传入Loader，则会出现如下错误</p><blockquote><p>YAMLLoadWarning: calling yaml.load() without Loader=… is deprecated,as the default Loader is unsafe. Please read <a href="https://msg.pyyaml.org/load" target="_blank" rel="noopener">https://msg.pyyaml.org/load</a> for full details.</p></blockquote><h1 id="写入yaml文件"><a href="#写入yaml文件" class="headerlink" title="写入yaml文件"></a>写入yaml文件</h1><p>yaml库支持将字典格式的数据写入到yml文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_data = &#123;<span class="string">'stages'</span>: [<span class="string">'prepare'</span>, <span class="string">'build'</span>], <span class="string">'prepare'</span>: &#123;<span class="string">'stage'</span>: <span class="string">'prepare'</span>, <span class="string">'script'</span>: [<span class="string">'med prepare -n prepare'</span>]&#125;, <span class="string">'build'</span>: &#123;<span class="string">'stage'</span>: <span class="string">'build'</span>, <span class="string">'script'</span>: [<span class="string">'med build -n release'</span>]&#125;&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"log/test2.yml"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(dict_data, f)</span><br></pre></td></tr></table></figure><p>可以看到生成文件test2.yml</p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><ol><li>从test.yml文件中读出的内容，再写入到yaml文件中时，文件格式已发生变化，要想保持读出的文件格式无变化，可以使用<code>ruamel.yaml</code>，将读出文件的内容存放到了OrderedDict中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ruamel.yaml</span><br></pre></td></tr></table></figure>实例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ruamel <span class="keyword">import</span> yaml</span><br><span class="line">y = <span class="string">""</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"log/test.yml"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    y = yaml.load(f, Loader=yaml.RoundTripLoader)</span><br><span class="line">print(y)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"log/test2.yml"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(y, f, Dumper=yaml.RoundTripDumper)</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li><li>若原yaml文件中包含数组和字典对象，则读出文件后再写入时会出现异常，暂无找到合适的解决方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔--每日更新</title>
      <link href="/2019/04/14/%E9%9A%8F%E7%AC%94-%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
      <url>/2019/04/14/%E9%9A%8F%E7%AC%94-%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="2019-12-27"><a href="#2019-12-27" class="headerlink" title="2019.12.27"></a>2019.12.27</h3><p>早上起来，想在微信里找到记事本，不小心进到收藏里，翻到跟前任的一些聊天记录，也是三年来的点点滴滴，看着聊天记录，记忆明晰又模糊。《奇葩说》第六季中有一期是辩论“爱人离世，你会把ta的记忆交给AI吗？”的辩题，如果这道题换成“和喜欢的人分手，你会选择把有关ta的一切一直保留吗？”，我觉得也是一样的道理，离开的已经离开，此刻的你和我还要继续生活，如果将TA的一切保留，勾起的只能是更多的伤心回忆，尽管在短暂的时刻里能够被幸福侵淫。ta的一切，只需要保留在记忆中，而那些经历风风雨雨，一直留在我们脑海中的，才是弥足珍贵的瞬间，才是永远也不会忘记的彼此，比如：在一起最单纯的原因……<br><img src="https://s2.ax1x.com/2019/12/27/lZsHa9.jpg" alt="远方"></p><a id="more"></a><h3 id="2019-04-16"><a href="#2019-04-16" class="headerlink" title="2019.04.16"></a>2019.04.16</h3><p>《权利的游戏》第8季终于更新了，好饭不怕晚。从15年入坑，到现在也是快4年了，权利游戏一年一更，以电影的手笔来精心打磨着每一集。从大到Cersei Lannister，小到Samwell Tarly，每个人物的形象都是非常饱满。<br>三傻从曾经的任性丫头变成凌冬城的女主人，学会了伪善与欺骗，也学会了权谋和利用，从第八季中和雪诺的交谈中，也可以看出她现在谁也不信，时刻保持着警惕。二丫真的经历了史塔克家族的所有巨变，从目睹父亲艾德被杀到血色婚礼上的母亲和哥哥罗柏被毒害，每一次都刺痛着这位姑娘幼小的心灵，以至于最后念着仇人的名字成为了无面者，真的是历经磨难完成修行，在孪河城将佛雷家族灭门时，也是让人痛快。瑟曦在剧中也是一大亮点，从来没有见过有这么恶毒的女人，为了达成自己的目的真的是不择手段。龙母、雪诺等，每一个人物展开来都是一本内容丰富的故事书。其实整个故事中，最吸引我的还是故事的不确定性，最开始以为的男主挨个倒下，不到故事的终点，永远也猜不到结局。可能这就是生活，每一天都有惊喜与惊吓。<br><img src="http://ws3.sinaimg.cn/large/005BYqpggy1g24uy26ev3j31hc0u0u0y.jpg" alt="权利的游戏"></p><h3 id="2019-04-14"><a href="#2019-04-14" class="headerlink" title="2019.04.14"></a>2019.04.14</h3><p>《调音师》一部印度烧脑悬疑片，从一个农夫射杀瞎眼兔子开始，介绍为了艺术和生活而装瞎子的男主阿卡什，电影中有提到男主是为了音乐而装瞎子，这样可以不受外界干扰，能够好好做音乐，另外他也因为是个瞎子而被人施舍，也有幸住在每月500卢比的房子里，他既是个纯粹的人，又是个不纯粹的人，这也为后面的真像创造了不同的可能性。其中有几件事是真的，①男主真的爱女主，②男主也真的爱音乐，③男主因为器官买卖的确获利了。也有很多人物或者故事是假的，比如最开始的猎人和兔子的故事，完全有可能是男主臆想出来的，还有影片中路过那颗树的，一个是停车了，另外一个是没有停车，这也就导致出现了两个可能的结果，①医生因为男主救了他，而和男主一起把女二的器官卖掉了，最后拿到钱后到了伦敦，②男主的一只眼睛慢慢恢复了，最后他有能力杀掉女二和医生，自己去做了器官交易，最后拿到钱去了伦敦。两种可能都讲的通，影片最后也是给观众留下了无限遐想。(电影结束后，大家都坐着等彩蛋，结果没等到🤕导演留给观众一个完全开放的结局，不管怎么样，导演想揭露印度器官买卖问题的目的已经达到了，大赞特赞<br><img src="http://ws3.sinaimg.cn/large/005BYqpggy1g22mzbdyhnj317u0re7a3.jpg" alt="一半光明一半黑暗"><br>二刷《调音师》<br>电影开头，阿卡什说道“说来话长，来杯咖啡？”，这也是阿卡什对苏菲讲述自己故事时说的第一句话，所以从猎人拿枪开始，后续的故事中除了苏菲经历过的，其余内容均有可能是假的。目前我认为可能的真相有三，前两个已经说过了，还有第三种脑洞大开的是：所有死去的人，都是男主杀死的，男主才是那个最大的赢家，自始至终男主的眼睛都是正常的。</p><h3 id="2019-01-29"><a href="#2019-01-29" class="headerlink" title="2019.01.29"></a>2019.01.29</h3><p>《地球上的星星》，一部豆瓣评分8.9，imdb排名top100的印度电影，从《三傻大闹宝莱坞》到《摔跤吧！爸爸》，米叔的电影真的从来不会让人失望，每一次都是真实的情感触动。星星讲的是尼克姆（米叔饰）如何引导一个有读写障碍的孩子，慢慢走出阴影，重拾手中的画笔的故事。尽管故事发生在一个有读写障碍的孩子身上，但身为正常人的我们难道不真是经历这所有的一切么？让我印象最深刻的是，当桌子上的所有实物被搬走时，孩子们反而不知道如何作画了，这正是最悲哀的事，正如尼克姆所说：“桌子太小，承载不了你们丰富的想象！”，不过我们“成年人”就没有这种担忧，哈哈(ಡωಡ)hiahiahia</p><img src="/2019/04/14/%E9%9A%8F%E7%AC%94-%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/%E5%9C%B0%E7%90%83%E4%B8%8A%E7%9A%84%E6%98%9F%E6%98%9F.jpeg" class=""><h3 id="2019-01-24"><a href="#2019-01-24" class="headerlink" title="2019.01.24"></a>2019.01.24</h3><blockquote><p>&emsp;前两天在楼下店里吃早餐的时候，看到两个视觉障碍的中年人也在等着吃早餐，他们每人点了一份油条，拿着筷子尝试性地找到油条的一头放到嘴里，似乎之前也似乎也能碰到他们，但是当时并没有感受到视觉障碍对他们的生活会带来多么大的障碍，除了走路外。当他们吃完后付款时，拿出手机放在耳边在左划右划时，看出来他们是在用类似于talkback的无障碍模式在操作，记得当时在vivo时还有幸参与过这个功能的测试，作为正常人体验，这个功能从开启到使用，再到关闭，顶多不会超过3分钟，因为实在是太难用了，看到有人使用这个功能来让他们的生活更加方便，心里还是有些许的感动，也在思考这个世界还是对这部分人太残忍了，很多软件在设计时根本不会考虑到IOS或者android提供的无障碍模式的接口，因为这样会增加开发成本，但是站在更人性的角度，我们应该在设计时考虑这些，每一次的创新都是站在人性和科技的十字路口，只有我们做好两者的协调才能做到真正的可持续。</p></blockquote><img src="/2019/04/14/%E9%9A%8F%E7%AC%94-%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/%E4%BA%BA%E6%96%87%E5%92%8C%E7%A7%91%E6%8A%80.jpg" class=""><h3 id="2019-01-10"><a href="#2019-01-10" class="headerlink" title="2019.01.10"></a>2019.01.10</h3><blockquote><p> &emsp;中午吃饭的时候忽然有个关于饭店点餐后自动提醒的点子，赶紧记录一下。<br> &emsp;我们都知道现在大多数饭店支付时都支持出示付款码支付或者扫码支付。也有些饭店会有一些提醒用户的小闹钟，顾客可以拿着闹钟坐在食堂的任意一个地方，等到饭做好后店家触发闹钟提醒用户来取餐。我的想法是可以将两者结合起来，当用户出示付款码支付完成后，在用户的支付宝或者微信中生成一条记录，记录类型由餐厅选择，固定时间or手动触发两种，当然也可以增加其他的模式，若为固定时间，则等到时间后自动提醒用户取餐，若为手动触发，则餐厅店主可手动触发提醒用户来取餐。</p></blockquote><h3 id="2019-01-07"><a href="#2019-01-07" class="headerlink" title="2019.01.07"></a>2019.01.07</h3><blockquote><p>&emsp;早上5点20就被黑皮叫醒了，之后就是各种撒娇，让我抱他上床，上床后让我也没办法睡觉，今天一天都感觉不是特别精神。养狗就像养小孩，我们说的话他们并不能听懂，要有足够的耐性引导他们，但是我觉得自己的耐心都快被黑皮消耗殆尽了。另外在我家也不能按时吃饭，感觉我是在虐待他。早上到公司后我就在豆瓣和微博上发了求领养的帖子，也在网上看了不想养的狗该如何处理。一天时间过去了，微博和豆瓣都没有回应，可能这就是缘分吧，不管怎么样，黑皮在我家一天，我就要认真照顾他一天，同时也希望能够给他找个好的下家。</p></blockquote><h3 id="2019-01-01"><a href="#2019-01-01" class="headerlink" title="2019.01.01"></a>2019.01.01</h3><blockquote><p>&emsp;在雪谷见证了不一样的爱情，有玩探探认识的丸子姐和她老公，有因为打架遇到现任老公的警嫂圆圆姐，还有子轩和她的大龄女朋友，缘份真的是妙不可言。尽管经历了15公里的徒步和一路的颠簸，反而并没有宅家里的疲惫，新的一天也是元气满满。在2019告诉自己自制力和养生，希望在提升自己自制力，摆脱掉拖延症的同时提升效率，跟着华哥和金融的小伙伴们一起越做越好，另外也做好自己的养生，爱护自己身体。加油(ง •̀_•́)ง<br>&emsp;跟对团很重要，我参与的是户外团，全程都是玩，要不要购物全看自己，全程除了从吉林站到雪乡和从雪谷到吉林站坐车比较久，其他安排都很棒，非常开心能和大家一块儿跨年，2019注定不平凡</p></blockquote><h3 id="2018-12-30"><a href="#2018-12-30" class="headerlink" title="2018.12.30"></a>2018.12.30</h3><blockquote><p>&emsp;目前正在从雾凇岛前往雪乡的路上，说说雾凇岛吧，我们从吉林站到雾凇岛的时候是9点半，发现看不到雾凇，不确定是我们来晚了还是的确如她所说今天的天气不适合形成雾凇。雾凇是松花江水的水汽和雾气遇到树枝凝固行程的冰晶，也就是俗称的树挂，没有看到雾凇也是蛮遗憾的，就像当年去华山没看到日出一样遗憾。<br>说实话，这个行程安排不是很合理，今天6个小时都要花在去雪乡的路上，坐在大巴车上的我，心里想着什么时候能有一辆私人飞机或者私人商务车带我游一游东北，哈哈，朝着这个梦想加油(ง •̀_•́)ง</p></blockquote><h3 id="2018-12-26"><a href="#2018-12-26" class="headerlink" title="2018.12.26"></a>2018.12.26</h3><blockquote><p> 今天是到新公司后参与第一个项目测试的第二天，也发现了一些从个人层面来说的小问题</p><ol><li>关于项目流程问题：目前新公司正在推行以jira为核心的敏捷开发流程，在这个过程中也是比较艰难的，比如story、工作项等的建立，jira bug的建立，都要花费PM、RD、QA一定的时间，当然从长远来看，合理规范地落实项目流程也是很有必要的一件事，也是有长线收益的好事。</li><li>关于沟通问题：自己也是刚接手项目，对整个流程不是很清楚，比如合同的生成、订单的生成等，在发现bug时也不知道提给谁，该跟谁沟通，这个需要一个不断积累，在项目执行中做好笔记，根据一个项目摸通整个数据的流向才是最佳收益<br>明天最后一天测试，加油！</li></ol></blockquote><h3 id="2018-12-25"><a href="#2018-12-25" class="headerlink" title="2018.12.25"></a>2018.12.25</h3><blockquote><p> 似乎冥冥之中自有天定，我们不得不承认，似乎一切也正在变得更好。首先要不是搬到天通苑，可能就不会想去雪乡，要不是我想去雪乡，就不会认识丸子领队，要不是认识丸子领队，就不会遇见小黑，要不是遇见小黑，就不会遇见小黑了，哈哈哈。隐约间，我记得答应过她来北京之后就陪她养只狗，果然实现了这个愿望。领到小黑，我要给他准备个温暖的小窝，每天至少跟他玩半小时，给他买好吃的狗粮和漂亮的狗盘子等等，期待(๑˙ー˙๑)</p></blockquote><h3 id="2018-12-24"><a href="#2018-12-24" class="headerlink" title="2018.12.24"></a>2018.12.24</h3><blockquote><p> 由于前段时间比较忙，断更很久了，从今天起，续上，哈哈<br> 沟通和交流是一件很重要的事，不管是同家人，还是在工作中，只有能明确表达出自己的需求，或者表达出自己想要表达的东西，都是难能可贵的。不小心入了金融的坑，面临着很多的未知，不管是流程、业务，还是金融测试中所包含的一些小技巧，都是需要快速掌握，才能在新工作中得心应手，而掌握这些知识的途径，最快的方法就是直接和PM或者QA前辈进行交流。当然，交流也是需要技巧的，不过最开始的一步就是如何提问，这是我觉得自己做的不够好的地方。给自己制定一个小计划，在每一次想要沟通前，仔细想好自己的问题，一步步梳理清楚自己的问题之后才去发问沟通!<br> 2018年的最后几天，要加油喽！</p></blockquote><h3 id="2018-5-8"><a href="#2018-5-8" class="headerlink" title="2018.5.8"></a>2018.5.8</h3><blockquote><p> 最近一直在思考什么叫敏捷开发，看到一篇知友的回复很有意思: 传统的开发流程就像客人点好菜，厨师按照菜单全部炒完后再给客人尝，而敏捷开发就是客人先点几道菜尝尝，有需要再加。传统开发流程修改代价比较大，整体项目周期偏长，而敏捷开发修改代价就比较小，周转也比较方便。</p></blockquote><h3 id="2018-5-7"><a href="#2018-5-7" class="headerlink" title="2018.5.7"></a>2018.5.7</h3><blockquote><p> 上周六晚上和学长玩了三把英雄联盟，好久不玩手都有点生了，好在三局两胜。最大的感受就是游戏变动好大，刚进入主界面就有很多的广告弹出来，要不是在电脑端玩，我还真以为登录的是王者荣耀呢！其次，游戏中出现LCK春季赛的logo，就像跳一跳、吃鸡游戏中出现的广告一样，未来的广告商路线，完全可以融入到游戏界面中。想象下酒桶和李白拿的是茅台酒，商店药品变成东鹏特饮，莫甘娜护盾化身360安全盾……收益还是很可观的，哈哈</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=506196018&auto=0&height=66"></iframe><h3 id="2018-5-4"><a href="#2018-5-4" class="headerlink" title="2018.5.4"></a>2018.5.4</h3><blockquote><p> 跟部门新来的研究生同事简单聊了下，他来公司也有一年多了，也在感慨自己啥都没学到，所有的精力都投在了琐碎的沟通上。成长这种事，主要就看自己想学啥，然后不断自己进行总结和深化并再次运用到工作中，不知不觉也就成长起来了。就像他自己说的想往管理方向发展，而学会高效沟通，正是他所选择方向需要的能力。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28057669&auto=0&height=66"></iframe><h3 id="2018-5-3"><a href="#2018-5-3" class="headerlink" title="2018.5.3"></a>2018.5.3</h3><blockquote><p> 尝试使用ubuntu下的<a href="http://wps-community.org/download.html" target="_blank" rel="noopener">wps</a>来编辑文档，讲真，是真的难用，让我不得不借电脑在widows下编辑。就像黑莓、塞班系统之于手机商业一样，用户量是很重要的一个驱动力。用户的存量主要有两个方面的优势，第一个为方便盈利或者变现，就像微博大V一样，随便一个广告就是好几千甚至根据粉丝量可能上万；另外一个为反向的驱动，用户的不断使用，也在逼迫厂商做不断优化，高德和百度定位SDK，很多基本服务都是免费提供给开发者的，通过这种方式来变相从用户反馈中获得更多的数据，以优化自身产品质量。ubuntu下的生态环境，目前主要还是开发者和一些服务器用户，普通用户很难从windows下直接过渡到linux，这也意味着未来的路不一定好走，且行且珍惜！</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28815250&auto=0&height=66"></iframe><h3 id="2018-5-2"><a href="#2018-5-2" class="headerlink" title="2018.5.2"></a>2018.5.2</h3><blockquote><p> 分别总是让人难过的，就像大学要毕业的一群人一样，我们可以用一种特别的方式互相送别，比如通宵游戏、通宵电影或者通宵唱歌，最后打包行囊的时候笑着告别，也会把心里的那份不舍小心翼翼的藏好。分别也会伴随着祝福，祝福前程似锦，步步高升，也会祝福财源滚滚。时间过得真快，又一次分别出现在面前，不管是同事的离开还是自己的重新选择的开始，后面的路只能收拾好心情，勇敢去迎接。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=32009001&auto=0&height=66"></iframe><h3 id="2018-5-1"><a href="#2018-5-1" class="headerlink" title="2018.5.1"></a>2018.5.1</h3><blockquote><p> 事业和爱情哪个更重要，不同的人有不同的答案，但当真正遇到抉择的时候，就是要认真权衡的事了。如果遇到对的人，值得你放弃当前的事业去追随TA，那就是选择了爱情。但是遇到的那个人并不是值得你追随的，那就是要选择事业。现在这个路口，我选择了前者，认真走好后面的路。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=258000&auto=0&height=66"></iframe><h3 id="2018-4-30"><a href="#2018-4-30" class="headerlink" title="2018.4.30"></a>2018.4.30</h3><blockquote><p> 被室友喊去爬了公寓附近的一座小山，忽然想起<a href="https://hanyu.baidu.com/shici/detail?pid=7cab1f87a2114b70a4db53a8167243a3&from=kg0" target="_blank" rel="noopener">《游褒禅山记》</a>中描述的“夫夷以近，则游者众；险以远，则至者少”，就像每个行业一样，在行业层的底部甚至中部，总是有大片的从业者，但是在行业的顶部却是“至者少”。他们所达到的成就，也和初衷有关，到底是利益驱动还是其他的驱动，往往得到的结果也是完全不一样的。</p></blockquote><h3 id="2018-4-29"><a href="#2018-4-29" class="headerlink" title="2018.4.29"></a>2018.4.29</h3><blockquote><p> 最近接连出现几款特别火的微信小程序游戏：跳一跳、最强弹一弹、神手, 回想起了自己玩过的游戏，从英雄联盟到王者荣耀，再到吃鸡游戏，每一款游戏在没落的同时，会有另外一款游戏来接盘，从联盟到王者花了两到三年的时间，而从王者再到吃鸡，也不过短短几个月。再看看如今的小游戏排行，几乎按月甚至于按周来更新。不得不说生活节奏太快了，想要满足这种快节奏下的需求，产品本身也要是快节奏的产品才行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中安装teslink+mysql</title>
      <link href="/2019/04/08/docker%E4%B8%AD%E5%AE%89%E8%A3%85teslink-mysql/"/>
      <url>/2019/04/08/docker%E4%B8%AD%E5%AE%89%E8%A3%85teslink-mysql/</url>
      
        <content type="html"><![CDATA[<p>使用docker搭建一个testlink服务器，外连公司的mysql数据库，可以方便地对数据做迁移<a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>安装docker</li><li>确定一个可用的数据库</li></ol><h1 id="容器初始化并定制"><a href="#容器初始化并定制" class="headerlink" title="容器初始化并定制"></a>容器初始化并定制</h1><h2 id="pull原生镜像"><a href="#pull原生镜像" class="headerlink" title="pull原生镜像"></a>pull原生镜像</h2><p>pull原生centos镜像，pull成功的话如下所示，若在pull过程中下载较慢或者无法连接，请尝试更换docker源后再pull</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos[:TAG]  <span class="comment">#不指定tag时默认tag为latest</span></span><br><span class="line">$ docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">8ba884070f61: Pull complete </span><br><span class="line">Digest: sha256:8d487d68857f5bc9595793279b33d082b03713341ddec91054382641d14db861</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br></pre></td></tr></table></figure><p>使用以下命令来查看本地的docker image：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="运行centos镜像"><a href="#运行centos镜像" class="headerlink" title="运行centos镜像"></a>运行centos镜像</h2><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged  -dit -p 80:80 -e <span class="string">"container=docker"</span>  --name testlink_server centos   /usr/sbin/init</span><br></pre></td></tr></table></figure><p>参数说明</p><blockquote><p>–privileged<br>-dit   后台运行<br>-p  端口映射<br>-e  设置环境变量<br>–name  设置运行容器名</p></blockquote><p>再执行docker  exec进入容器终端操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it testlink_server  /bin/bash</span><br></pre></td></tr></table></figure><h2 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h2><p>使用centos自带的包管理工具yum来安装apache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y update   <span class="comment">#更新软件</span></span><br><span class="line">yum install httpd -y    <span class="comment">#安装apache</span></span><br></pre></td></tr></table></figure><p>等待以上命令安装成功后启动apache并将apach加入到开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd    <span class="comment">#启动apache服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span>  httpd   <span class="comment">#设置apache开机自启动</span></span><br></pre></td></tr></table></figure><p>若在使用systemctl时提示<em>Failed to get D-Bus connection: Operation not permitted</em>，请检查容器是否使用–privileged启动，详细解决方法可参考<a href="https://blog.csdn.net/weixin_42123737/article/details/87984996" target="_blank" rel="noopener">Centos7 Docker容器中报错 Failed to get D-Bus connection: Operation not permitted</a><br>此时可以打开本地浏览器<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 若提示展示如下页面，则表明apache服务启动成功<br><img src="http://uploader.shimo.im/f/2HNsENZiIhYjGscg.png!thumbnail" alt="图片"></p><h2 id="安装php5-6"><a href="#安装php5-6" class="headerlink" title="安装php5.6"></a>安装php5.6</h2><p>添加centOS 7.0源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br></pre></td></tr></table></figure><p>yum源配置好后安装PHP5.6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install --enablerepo=remi --enablerepo=remi-php56 php php-opcache php-devel php-mbstring php-mcrypt php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-pecl-xhprof</span><br></pre></td></tr></table></figure><p>安装完成后建议执行clean来清除一些多余缓存，以减少生成的镜像的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>检查当前php版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># php -v</span></span><br><span class="line">PHP 5.6.40 (cli) (built: Mar 15 2019 15:26:44) </span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies</span><br><span class="line">    with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans</span><br></pre></td></tr></table></figure><p>注意：若当前版本小于5.6，则在运行最新版testlink的php代码时会报错</p><h2 id="安装testlink"><a href="#安装testlink" class="headerlink" title="安装testlink"></a>安装testlink</h2><h3 id="下载testlink包"><a href="#下载testlink包" class="headerlink" title="下载testlink包"></a>下载testlink包</h3><p>我们使用最新版testlink 1.9.19，其他版本请到<a href="https://sourceforge.net/p/testlink/activity/?page=0&limit=100#5c475ad6ee24ca086c403833" target="_blank" rel="noopener">testlink官网</a>下载<br>方法一.在centos容器中 使用wget直接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/testlink/TestLink%201.9/TestLink%201.9.19/testlink-1.9.19.tar.gz</span><br></pre></td></tr></table></figure><p>方法二.在宿主机上下载后复制到容器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/testlink/TestLink%201.9/TestLink%201.9.19/testlink-1.9.19.tar.gz</span><br><span class="line">docker cp testlink-1.9.19.tar.gz testlink_server:/</span><br></pre></td></tr></table></figure><p>ps：推荐使用方法二，这样就无需在容器中安装wget了，使得制作的镜像相对来说比较小</p><h3 id="解压testlink包并安装"><a href="#解压testlink包并安装" class="headerlink" title="解压testlink包并安装"></a>解压testlink包并安装</h3><p>容器中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf testlink-1.9.19.tar.gz testlink</span><br></pre></td></tr></table></figure><p>拷贝testlink到apache服务的指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv testlink-1.9.19 /var/www/html/testlink</span><br></pre></td></tr></table></figure><p>重启apache服务后访问<a href="http://localhost/testlink" target="_blank" rel="noopener">http://localhost/testlink</a> 可进入如下界面则表明apache已安装成功<br><img src="http://uploader.shimo.im/f/CqppA7S7yoICaFMU.png!thumbnail" alt="图片"></p><h2 id="配置testlink"><a href="#配置testlink" class="headerlink" title="配置testlink"></a>配置testlink</h2><h3 id="PHP配置"><a href="#PHP配置" class="headerlink" title="PHP配置"></a>PHP配置</h3><p><img src="http://ws3.sinaimg.cn/large/005BYqpggy1g22n5e8w8yj30vj0u043l.jpg" alt="图片"><br>php配置文件目录为</p><blockquote><p>/etc/php.ini</p></blockquote><p>根据提示修改<br>A、Maximum Session Idle Time before Timeout 24 minutes and 0 seconds - (Short. Consider to extend.)<br>解决：php.ini文件修改： session.gc_maxlifetime的值为2400<br>B、Checking max. execution time (Parameter max_execution_time)<br>解决：php.ini文件修改：<br>max_execution_time = 120<br>C. Checking Postgres Database Failed! Postgres Database cannot be used.<br>Checking MSSQL Database Failed！<br>解决：如连接MySQL，不用处理该警告，否则安装即可<br>D、Checking LDAP library OK<br>解决：php.ini文件修改如下：<br>extension=php_ldap.dll<br>发现没有php_ldap.dll，安装PHP的LDAP扩展，还是没有，发现名字换了，于是把php_ldap.dll换成ldap.dll，不再报错</p><h3 id="添加对应目录并增加读写权限"><a href="#添加对应目录并增加读写权限" class="headerlink" title="添加对应目录并增加读写权限"></a>添加对应目录并增加读写权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /var/www/html/testlink/gui/templates_c </span><br><span class="line">mkdir /var/testlink</span><br><span class="line">mkdir /var/testlink/logs/</span><br><span class="line">mkdir /var/testlink/upload_area/</span><br><span class="line">chmod 777 /var/testlink/logs/</span><br><span class="line">chmod 77 /var/testlink/upload_area/</span><br></pre></td></tr></table></figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>配置数据库有两种方法，适用于不同的场景<br>方法一.手动生成数据表结构并添加对应的配置文件<br>适用条件：已有数据库，只需要单独添加teslink的数据库即可，方便数据的迁移<br>操作步骤：</p><ol><li>在对应数据库中执行：<br>CREATE DATABASE testlink CHARACTER SET utf8 COLLATE utf8_general_ci</li><li>使用testlink自带的sql脚本testlink_create_tables.sql生成表</li><li>使用testlink自带的sql脚本testlink_create_default_data生成默认数据</li><li>在testlink目录下新增配置文件config_DB.inc.php，内容如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'DB_TYPE'</span>, <span class="string">'mysql'</span>);</span><br><span class="line">define(<span class="string">'DB_USER'</span>, <span class="string">'yourname'</span>);</span><br><span class="line">define(<span class="string">'DB_PASS'</span>, <span class="string">'yourpassword'</span>);</span><br><span class="line">define(<span class="string">'DB_HOST'</span>, <span class="string">'databasehost:databaseport'</span>);</span><br><span class="line">define(<span class="string">'DB_NAME'</span>, <span class="string">'testlink'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>ps：sql脚本路径 testlink/install/sql/mysql<br>方法二.根据<a href="http://localhost/testlink/install/" target="_blank" rel="noopener">http://localhost/testlink/install/</a>中的提示逐步完成<br>适用条件：首次搭建，<br>操作步骤：根据web提示添加信息即可<br><img src="http://ws3.sinaimg.cn/large/005BYqpggy1g22n3h7awvj30u0196tpk.jpg" alt="图片"></p><p>配置完成后重启apache服务</p><p>至此，我们已经启动了一个可随时运行的容器，并在本机运行，但是很多时候我们需要把服务部署到特定服务器上</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署时我们只需要将本地容器制作成镜像，然后部署到对应的服务器即可</p><h2 id="制作docker镜像"><a href="#制作docker镜像" class="headerlink" title="制作docker镜像"></a>制作docker镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a <span class="string">"example@example.com"</span> -m <span class="string">"基于centos的镜像搭建"</span> 2480719f8213 testlink-server/testlink:v4</span><br></pre></td></tr></table></figure><h2 id="镜像推送到指定hub"><a href="#镜像推送到指定hub" class="headerlink" title="镜像推送到指定hub"></a>镜像推送到指定hub</h2><p>修改tag为规范的tag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag SOURCE_IMAGE[:TAG] 仓库域名/仓库名/IMAGE[:TAG]</span><br></pre></td></tr></table></figure><p>修改tag成功后可以使用<em>docker images</em>查看<br>push本地镜像到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 仓库域名/仓库名/IMAGE[:TAG]</span><br></pre></td></tr></table></figure><h3 id="服务器下载镜像并启动"><a href="#服务器下载镜像并启动" class="headerlink" title="服务器下载镜像并启动"></a>服务器下载镜像并启动</h3><p>登陆要部署的服务器，下载对应镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull  仓库域名/仓库名/IMAGE[:TAG]</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged  -dit -p 8009:80 -e <span class="string">"container=docker"</span>  --name testlink_server testlink:v4   /usr/sbin/init</span><br></pre></td></tr></table></figure><p>此时testlink服务器已部署完成，需要修改时执行以下命令，进入终端操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it testlink_server /bin/bash</span><br></pre></td></tr></table></figure><p>以上</p><p>参考文章<br><a href="https://blog.csdn.net/weixin_42123737/article/details/87984996" target="_blank" rel="noopener">Centos7 Docker容器中报错 Failed to get D-Bus connection: Operation not permitted</a><br><a href="https://blog.csdn.net/u011277123/article/details/77847360/" target="_blank" rel="noopener">centos7 部署Apache服务器</a><br><a href="https://www.cnblogs.com/toughlife/p/5479271.html" target="_blank" rel="noopener">在CentOS安装PHP5.6</a><br><a href="https://www.jianshu.com/p/45a36b61ad24?nomobile=yes" target="_blank" rel="noopener">testlink—安装与配置</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次ss无法连接的问题</title>
      <link href="/2019/03/10/%E8%AE%B0%E4%B8%80%E6%AC%A1ss%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/10/%E8%AE%B0%E4%B8%80%E6%AC%A1ss%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>解决ss连接后无法上网，服务器日志报unsupported addrtype的问题<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在virmach上买了一年的VPS服务器，然后搭建了一个VPN<a href="http://www.techbulo.com/2317.html" target="_blank" rel="noopener">http://www.techbulo.com/2317.html</a>，刚开始可以正常使用，忽然在上周开始不能使用了，连接服务器后测试连接，查看报错日志如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@xxxxxx<span class="comment"># tail -f /var/log/shadowsocks.log </span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">56</span> WARNING  unsupported addrtype <span class="number">19</span>, maybe wrong password <span class="keyword">or</span> encryption method</span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">56</span> ERROR    can <span class="keyword">not</span> parse header when handling connection <span class="keyword">from</span> <span class="number">124.65</span><span class="number">.151</span><span class="number">.34</span>:<span class="number">56100</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">57</span> WARNING  unsupported addrtype <span class="number">19</span>, maybe wrong password <span class="keyword">or</span> encryption method</span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">57</span> ERROR    can <span class="keyword">not</span> parse header when handling connection <span class="keyword">from</span> <span class="number">124.65</span><span class="number">.151</span><span class="number">.34</span>:<span class="number">56106</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">57</span> WARNING  unsupported addrtype <span class="number">19</span>, maybe wrong password <span class="keyword">or</span> encryption method</span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">57</span> ERROR    can <span class="keyword">not</span> parse header when handling connection <span class="keyword">from</span> <span class="number">124.65</span><span class="number">.151</span><span class="number">.34</span>:<span class="number">56112</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">58</span> WARNING  unsupported addrtype <span class="number">19</span>, maybe wrong password <span class="keyword">or</span> encryption method</span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">58</span> ERROR    can <span class="keyword">not</span> parse header when handling connection <span class="keyword">from</span> <span class="number">124.65</span><span class="number">.151</span><span class="number">.34</span>:<span class="number">56118</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">58</span> WARNING  unsupported addrtype <span class="number">19</span>, maybe wrong password <span class="keyword">or</span> encryption method</span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">58</span> ERROR    can <span class="keyword">not</span> parse header when handling connection <span class="keyword">from</span> <span class="number">124.65</span><span class="number">.151</span><span class="number">.34</span>:<span class="number">56124</span></span><br></pre></td></tr></table></figure><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>首先怀疑是我服务器的IP被墙给屏蔽了，导致无法访问google，电脑上运行ping 测试，连接正常，排除IP被屏蔽</p><p>之后又怀疑是ss服务端运行错误，导致无法连接，所以我重启服务器和重启ss服务，均无效</p><p>求教virmach的工作人员，给的结论是ss配置有问题，朝着这个方向，查看ss的运行日志，发现如上所示异常，尝试加密方式和端口均未解决</p><p>最后在github上查到可能是加密版本问题，所以我重新安装了ss服务端，同时修改了加密方式，更新android客户端，可以正常使用，最新配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"xxx.xxx.xxx.xxx"</span>,  <span class="comment">#服务器ip</span></span><br><span class="line">    <span class="string">"server_port"</span>:9988,    <span class="comment">#选择一个服务器端口</span></span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"yourpassword"</span>,   <span class="comment">#设置的密码</span></span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"rc4-md5"</span>,    <span class="comment">#加密方式为rc4-md5，相对来说加密快</span></span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最新版 <a href="https://github.com/shadowsocks" target="_blank" rel="noopener">shadowsocks</a></p>]]></content>
      
      
      <categories>
          
          <category> vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
            <tag> 梯子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git合并分支并删除分支多余分支</title>
      <link href="/2019/02/26/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E5%B9%B6%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF%E5%A4%9A%E4%BD%99%E5%88%86%E6%94%AF/"/>
      <url>/2019/02/26/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E5%B9%B6%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF%E5%A4%9A%E4%BD%99%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要在本地拉一个dev分支用来开发，开发完成后并不是直接提交到服务器，而是在本地合并到master分之后提交到服务器，这样就不会在服务器显示多余的分支，而大多数时候是在提交到服务器再merge到对应分支，这样在代码仓库里是能看到对应的分支。</p><a id="more"></a><h1 id="本地合并分支后提交到服务器仓库"><a href="#本地合并分支后提交到服务器仓库" class="headerlink" title="本地合并分支后提交到服务器仓库"></a>本地合并分支后提交到服务器仓库</h1><p>当前目录结构如下，且位于master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>新建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>以上两步可以整合为一个命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev   <span class="comment">#创建并切换分支</span></span><br></pre></td></tr></table></figure><p>创建修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim README.md </span><br><span class="line">$ git status</span><br><span class="line">位于分支 dev</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">"git add &lt;文件&gt;..."</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">"git checkout -- &lt;文件&gt;..."</span> 丢弃工作区的改动）</span><br><span class="line">修改：     README.md</span><br></pre></td></tr></table></figure><p>提交修改到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure><p>提交到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  commit -m<span class="string">"第二次提交"</span></span><br></pre></td></tr></table></figure><p>切换分支到master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>merge dev分支到master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>提交修改到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push  -u origin master</span><br></pre></td></tr></table></figure><p>删除本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h1 id="提交到服务器仓库后再merge分支"><a href="#提交到服务器仓库后再merge分支" class="headerlink" title="提交到服务器仓库后再merge分支"></a>提交到服务器仓库后再merge分支</h1><p>当前目录结构如下，且位于master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>新建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>创建修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim README.md </span><br><span class="line">$ git status</span><br><span class="line">位于分支 dev</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">"git add &lt;文件&gt;..."</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">"git checkout -- &lt;文件&gt;..."</span> 丢弃工作区的改动）</span><br><span class="line">修改：     README.md</span><br></pre></td></tr></table></figure><p>提交修改到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure><p>提交到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  commit -m<span class="string">"第三次提交"</span></span><br></pre></td></tr></table></figure><p>提交修改到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin dev</span><br><span class="line">枚举对象: 5, 完成.</span><br><span class="line">对象计数中: 100% (5/5), 完成.</span><br><span class="line">使用 4 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (2/2), 完成.</span><br><span class="line">写入对象中: 100% (3/3), 297 bytes | 297.00 KiB/s, 完成.</span><br><span class="line">总共 3 （差异 1），复用 0 （差异 0）</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request <span class="keyword">for</span> <span class="string">'dev'</span> on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/xdthesun/<span class="built_in">test</span>/pull/new/dev</span><br><span class="line">remote: </span><br><span class="line">To https://github.com/xdthesun/test.git</span><br><span class="line"> * [new branch]      dev -&gt; dev</span><br><span class="line">分支 <span class="string">'dev'</span> 设置为跟踪来自 <span class="string">'origin'</span> 的远程分支 <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p>切换分支到master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>merge dev分支到master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>提交修改到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push  -u origin master</span><br></pre></td></tr></table></figure><p>删除本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><p>也可以删除远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a   <span class="comment">#查看远程分支名</span></span><br><span class="line">remotes/origin/HEAD -&gt; origin/master  <span class="comment">#当前位于master分支</span></span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/master</span><br><span class="line">$ git push origin --delete dev   <span class="comment">#服务器上有删除分支的记录</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的时间与日期</title>
      <link href="/2019/02/24/python%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/"/>
      <url>/2019/02/24/python%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>最近在工作中用到在写入数据库数据时需要指定时间的问题，数据库中的时间格式是确定的，写入数据时也需要指定对应的时间格式，并且是str类型的，对于某些特殊数据也有加减特定天或者分钟的需求，实际使用过程中遇到很多问题，遂对python中的时间与日期相关的知识做个整理。</p><a id="more"></a><h1 id="基本库"><a href="#基本库" class="headerlink" title="基本库"></a>基本库</h1><p>python中常用的两个时间库分别为time和datetime，time提供操作各种时间的函数和常量，datetime是一个使用面向对象编程设计的模块，它定义了几个表示日期和时间的类 </p><h2 id="time库"><a href="#time库" class="headerlink" title="time库"></a>time库</h2><h3 id="时间元组"><a href="#时间元组" class="headerlink" title="时间元组"></a>时间元组</h3><p>Python时间函数将时间处理为9个数字的元组，各个索引所代表的字段及取值范围如下所示：<br>| 索引   | 字段   | 含义   | 值范围   |<br>|:—-|:—-|:—-|:—-|<br>| 0   | tm_year   | 4位数，表示年份   | 2018，2019…   |<br>| 1   | tm_mon   | 月份   | [1-12]   |<br>| 2   | tm_mday   | 日期   | [1-31]   |<br>| 3   | tm_hour   | 小时   | [0-23]   |<br>| 4   | tm_min   | 分钟   | [0-59]   |<br>| 5   | tm_sec   | 秒   | [0-60]   |<br>| 6   | tm_wday   | 星期几   | [0-6]   |<br>| 7   | tm_yday   | 一年的第几天   | [1-366]   |<br>| 8   | tm_isdst   | 夏令时   | 1，0，1，-1是决定是否为夏令时的flag   | </p><p>获取时间元组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;time.localtime()</span><br><span class="line">time.struct_time(tm_year=2019, tm_mon=2, tm_mday=23, tm_hour=8, tm_min=35, tm_sec=33, tm_wday=5, tm_yday=54, tm_isdst=0)</span><br></pre></td></tr></table></figure><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>时间戳表示的是从1970年1月１日开始按秒计算的偏移量(time.gmtime(0))此模块中的函数无法处理1970纪元年以前的时间或太遥远的未来(处理极限取决于C函数库，对于32位系统而言，是2038年)<br>获取当前时间戳</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;time.time()</span><br><span class="line">1550882299.8993332</span><br></pre></td></tr></table></figure><h3 id="时间格式化符号"><a href="#时间格式化符号" class="headerlink" title="时间格式化符号"></a>时间格式化符号</h3><table><thead><tr><th align="left">格式化符号</th><th align="left">含义</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">%y</td><td align="left">两位数的年份表示</td><td align="left">[0-99]</td></tr><tr><td align="left">%Y</td><td align="left">四位数的年份</td><td align="left">[000-9999]</td></tr><tr><td align="left">%m</td><td align="left">月份</td><td align="left">[01-12]</td></tr><tr><td align="left">%d</td><td align="left">日期</td><td align="left">[1-31]</td></tr><tr><td align="left">%H</td><td align="left">24小时制的小时</td><td align="left">[0-23]</td></tr><tr><td align="left">%I</td><td align="left">12小时制的小时</td><td align="left">[0-12]</td></tr><tr><td align="left">%M</td><td align="left">分钟数</td><td align="left">[00-59]</td></tr><tr><td align="left">%S</td><td align="left">秒</td><td align="left">[00-59]</td></tr><tr><td align="left">%a</td><td align="left">本地简化星期的名称</td><td align="left"></td></tr><tr><td align="left">%A</td><td align="left">本地完整星期的名称</td><td align="left"></td></tr><tr><td align="left">%b</td><td align="left">本地简化月份的名称</td><td align="left"></td></tr><tr><td align="left">%B</td><td align="left">本地完整月份的名称</td><td align="left"></td></tr><tr><td align="left">%c</td><td align="left">本地相应的日期表示和时间表示</td><td align="left"></td></tr><tr><td align="left">%j</td><td align="left">年内的一天</td><td align="left">[0-366]</td></tr><tr><td align="left">%p</td><td align="left">本地A.M和P.M的等价符</td><td align="left"></td></tr><tr><td align="left">%U</td><td align="left">一年中的星期数，星期天开始计算</td><td align="left">[0-53]</td></tr><tr><td align="left">%u</td><td align="left">星期,星期天为开始</td><td align="left">[0-6]</td></tr><tr><td align="left">%W</td><td align="left">一年中的星期数，星期一开始计算</td><td align="left">[0-53]</td></tr><tr><td align="left">%x</td><td align="left">本地相应的日期表示</td><td align="left"></td></tr><tr><td align="left">%X</td><td align="left">本地相应的时间表示</td><td align="left"></td></tr><tr><td align="left">%Z</td><td align="left">当前时区的名称</td><td align="left"></td></tr></tbody></table><h3 id="常用函数和属性"><a href="#常用函数和属性" class="headerlink" title="常用函数和属性"></a>常用函数和属性</h3><ul><li><strong>time.altzone</strong><br>返回格林威治西部的夏令时地区的偏移秒数，如果该地区在格林威治东部会返回负值(如西欧，包括英国)，对夏令时启用地区才能使用</li><li><strong>time.asctime([t])</strong><br>接受时间元组并返回一个可读的形式”Tue May 30 17:17:30 2017”(2017年5月30日周二17时17分30秒)的24个字符的字符串</li><li><strong>time.clock()</strong><br>用以浮点数计算的秒数返回当前的CPU时间，用来衡量不同程序的耗时，比time.time()更有用,python3.3以后不被推荐使用，该方法依赖操作系统，建议使用perf_counter(返回系统运行时间)或process_time(返回进程运行时间)代替</li><li><strong>time.ctime([secs])</strong><br>作用相当于asctime(localtime(secs)),未给参数相当于asctime()</li><li><strong>time.gmtime([secs])</strong><br>接收时间辍(1970纪元年后经过的浮点秒数)并返回格林威治天文时间下的时间元组t(t.tm_isdst始终为０)</li><li><strong>time.daylight</strong><br>如果夏令时被定义，则该值为非零</li><li><strong>time.localtime([secs])</strong><br>接收时间辍(1970纪元年后经过的浮点秒数)并返回当地时间下的时间元组t(t.tm_isdst可取为０或１，取决于当地当时是不是夏令时)</li><li><strong>time.mktime(t)</strong><br>接受时间元组并返回时间辍(1970纪元年后经过的浮点秒数)</li><li><strong>time.perf_counter()</strong><br>返回计时器的精准时间(系统的运行时间)，包含整个系统的睡眠时间．由于返回值的基准点是未定义的，所以，只有连续调用的结果之间的差才是有效的</li><li><strong>time.process_time()</strong><br>回当前进程执行CPU的时间总和，不包含睡眠时间．由于返回值的基准点是未定义的，所以只有连续调用的结果之间的差才是有效的</li><li><strong>time.sleep(secs)</strong><br>迟调用线程的运行，secs的单位是秒</li><li><strong>time.strftime(format[,t])</strong><br>把一个代表时间的元组或者struct_time(如由time.localtime()和time.gmtime()返回)转化为格式化的时间字符串．如果t未指定，将传入time.localtime()，如果元组中任命一个元素越界，将会抛出ValueError异常</li><li><strong>time.strptime(string[,format])</strong><br>把一个格式化时间字符串转化为struct_time,实际上它和strftie()是逆操作</li><li><strong>time.time()</strong><br>返回当前时间的时间戳(1970元年后的浮点秒数)</li><li><strong>time.timezone()</strong><br>是当地时区(未启动夏令时)距离格林威治的偏移秒数(美洲＞０，欧洲大部分，亚洲，非洲&lt;＝０)</li><li><strong>time.tzname</strong><br>包含两个字符串的元组，第一是当地夏令时区的名称，第二是当地的DST时区的名称<h2 id="datetime库"><a href="#datetime库" class="headerlink" title="datetime库"></a>datetime库</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3></li><li>datetime.date：表示日期的类，可以对日期进行操作</li><li>datetime.datetime：表示时间的类，可单独对时间进行操作</li><li>datetime.time：表示时间的类</li><li>datetime.timedelta：表示时间间隔，即两个时间点的间隔</li><li>datetime.tzinfo：时区的相关信息<h3 id="常用函数和属性-1"><a href="#常用函数和属性-1" class="headerlink" title="常用函数和属性"></a>常用函数和属性</h3>datetime.date类</li><li>datetime.date(year, month, day) # 初始化一个date对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.date(2019,12,10)</span><br><span class="line">datetime.date(2019, 12, 10)</span><br></pre></td></tr></table></figure></li><li>datetime.date.today() # 以当前年、月、日 初始化一个date对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.date.today()</span><br><span class="line">datetime.date(2019, 2, 24)</span><br></pre></td></tr></table></figure></li><li>datetime.date       strftime(format) # 格式化日期，时分秒均默认为0<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; format = <span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">&gt;&gt;&gt; datetime.date.today().strftime(format)</span><br><span class="line"><span class="string">'2019-02-24 00:00:00'</span></span><br></pre></td></tr></table></figure></li><li>datetime.date     timetuple()  # 转成时间元组格式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.date.today().timetuple()</span><br><span class="line">time.struct_time(tm_year=2019, tm_mon=2, tm_mday=24, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=55, tm_isdst=-1)</span><br></pre></td></tr></table></figure></li><li>datetime.date     replace(year=?, month=?, day=?) # 返回一个替换后的date对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.date.today().replace(month=1)</span><br><span class="line">datetime.date(2019, 1, 24)</span><br></pre></td></tr></table></figure></li><li>datetime.date.formattimestamp() #将时间戳转化为date对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.date.fromtimestamp(time.time())</span><br><span class="line">datetime.date(2019, 2, 24)</span><br></pre></td></tr></table></figure></li></ul><p>datetime.time类</p><ul><li>datetime.time(hour, minute, second, mircoecond) #初始化一个time对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.time(8,12,20,20)</span><br><span class="line">datetime.time(8, 12, 20, 20)</span><br></pre></td></tr></table></figure></li><li>datetime.time   strftime()  #格式化日期，转为str，年月日默认为时间戳元年<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.time(8,12,20,20).strftime(format)</span><br><span class="line"><span class="string">'1900-01-01 08:12:20'</span></span><br></pre></td></tr></table></figure>datetime.datetime类所包含的方法和属性与datetime.date和datetime.time类包含的类似，用法也相似，这里就不再赘述</li><li>datetime.datetime(year, month, day, hour, minute, second, mircosecond)</li><li>datetime.datetime.now([tz])  #当不指定时区时，和datetime.datetime.today()是一样的结果，如下</li><li>datetime.datetime.strftime(format)  #格式化为需要的时间，如常用的 “年-月-日 小时：分钟：秒” 格式</li><li>datetime.datetime.timtuple()  #转成struct_time格式，这样传递给time.mktime(t)  后，直接转成时间戳格式</li><li>datetime.datetime.replace(year, month, day)   #返回一个替换后的date对象</li><li>datetime.datetime.fromtimestamp(timestamp)  #将时间戳转化为datetime对象</li></ul><p>datetime.timedelta类<br>datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)<br>主要用于计算时间间隔一定时间的时间值，比如举例今日7天前的时间为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.datetime.today()-datetime.timedelta(days=7)</span><br><span class="line">datetime.datetime(2019, 2, 17, 21, 44, 28, 282900)</span><br></pre></td></tr></table></figure><h1 id="时间的转换"><a href="#时间的转换" class="headerlink" title="时间的转换"></a>时间的转换</h1><h3 id="时间戳转换为时间元组"><a href="#时间戳转换为时间元组" class="headerlink" title="时间戳转换为时间元组"></a>时间戳转换为时间元组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.localtime(timestamp)</span><br></pre></td></tr></table></figure><h3 id="时间元祖转换为时间戳"><a href="#时间元祖转换为时间戳" class="headerlink" title="时间元祖转换为时间戳"></a>时间元祖转换为时间戳</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.mktime(struct_time)</span><br></pre></td></tr></table></figure><h3 id="str转时间元组"><a href="#str转时间元组" class="headerlink" title="str转时间元组"></a>str转时间元组</h3><p>使用strptime(str, format)方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;format = <span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">&gt;&gt;&gt;time.strptime(<span class="string">'2019-02-24 00:00:00'</span>, format)</span><br><span class="line">time.struct_time(tm_year=2019, tm_mon=2, tm_mday=24, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=55, tm_isdst=-1)</span><br></pre></td></tr></table></figure><h3 id="时间元组转str"><a href="#时间元组转str" class="headerlink" title="时间元组转str"></a>时间元组转str</h3><p>使用strftime(format, timetuple)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;format = <span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br><span class="line">&gt;&gt;&gt; time.strftime(format, time.localtime())</span><br><span class="line"><span class="string">'2019-02-24 21:54:53'</span></span><br></pre></td></tr></table></figure><h3 id="时间戳转成str"><a href="#时间戳转成str" class="headerlink" title="时间戳转成str"></a>时间戳转成str</h3><p>先使用time.localtime(timestamp)将时间戳转成时间元组，再使用time.strftime(format,timetuple)转成str即可</p><h3 id="str转为时间戳"><a href="#str转为时间戳" class="headerlink" title="str转为时间戳"></a>str转为时间戳</h3><p>先使用time.strptime(str,  format)将str转为时间元组，再使用time.mktime(timetuple)将时间元组转为时间戳</p><h3 id="时间增加某几天或者减少某几天"><a href="#时间增加某几天或者减少某几天" class="headerlink" title="时间增加某几天或者减少某几天"></a>时间增加某几天或者减少某几天</h3><p>使用datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0),可以增加或者减少对应的天、小时、分、秒等</p><h3 id="时间大小的比较"><a href="#时间大小的比较" class="headerlink" title="时间大小的比较"></a>时间大小的比较</h3><p>将时间统一转换为str或者时间戳，或者时间元组进行比较</p><p>-</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> time </tag>
            
            <tag> datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现字符串算式计算</title>
      <link href="/2019/01/29/python%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
      <url>/2019/01/29/python%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E5%BC%8F%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>计算输入的字符串算式的结果，输入为一个字符串的算式，包含小括号、+、-、*、/以及小数点，0-9的整数，若输入的字符串是规范的算式（中缀式），则输出算式的计算结果，否则报错</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>input: 1+((32.34+3)*4)-5<br>output:137.36</p></blockquote><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>表达式有前缀式、后缀式、中缀式，而我们一般提到的算式均为中缀式，中缀式表达式对于我们来说是很容易计算的，但是对于计算机来说，使用前缀式或者后缀式来计算是更加方便的，所以我们解决的完整思路如下：</p><ol><li>判断算式是否符合规范的中缀式表达式</li><li>将中缀式转为前缀式或者后缀式</li><li>根据前缀式或者后缀式计算最终结果<h2 id="判断算式"><a href="#判断算式" class="headerlink" title="判断算式"></a>判断算式</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3>字符串算式中包含括号，所以需要判断括号是否匹配，判断括号匹配的步骤如下：<blockquote><ol><li>初始化一个栈S，从左到右开始遍历字符串strs；</li><li>遇到左括号直接入栈S；</li><li>遇到右括号时：</li><li><ol><li>若栈为空，则括号不匹配，则停止遍历；</li></ol></li><li><ol start="2"><li>若栈顶元素是左括号，则栈顶元素出栈，继续扫描下一个；</li></ol></li><li><ol start="3"><li>若栈顶元素为右括号，则括号不匹配，则停止遍历；</li></ol></li><li>遇到数字或者运算符以及小数点时，不入栈</li><li>反复执行2-4，直到扫描完整个字符串</li><li>判断栈S是否为空，若栈为空，则表示括号匹配，否则括号不匹配</li></ol></blockquote></li></ol><p>python代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isFormula</span><span class="params">(self, str)</span>:</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="comment"># 去除字符串中的空格</span></span><br><span class="line">    strs = str.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strs:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">is</span> <span class="string">'('</span>:</span><br><span class="line">            temp.append(i)</span><br><span class="line">        <span class="keyword">elif</span> i <span class="keyword">is</span> <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">if</span> len(temp) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> temp[<span class="number">-1</span>] <span class="keyword">is</span> <span class="string">'('</span>:</span><br><span class="line">                temp.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp.append(i)</span><br><span class="line">    res = re.match(pattern, strs)</span><br><span class="line">    <span class="keyword">if</span> len(temp) == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="算式的匹配"><a href="#算式的匹配" class="headerlink" title="算式的匹配"></a>算式的匹配</h3><p>目前想到最快的方式是利用正则表达式，简单分析下所有算式的共性：</p><blockquote><ol><li>以括号或者数字开头</li><li>以括号或者数字结尾</li><li>中间有1个运算符或者n个（运算符+数字）的表达式组成</li><li>每个数字前均有一个或者n个括号</li><li>每个数字中可能有一个（小数点+数字）组成分数 </li></ol></blockquote><p>根据以上规则，得到的正则表达式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="string">r'^\(*\d+(\.\d+)?((\+|\*|/|-)\(*\d+(\.\d+)?\)*)*(\+|\*|/|-)\d+(\.\d+)?\)*$'</span></span><br></pre></td></tr></table></figure><p>PS：当然，括号匹配也应该可以加到正则表达式中，但是我并没有找到，如果有读者想到的话，可以留言交流<br>所以判断算式是否匹配的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="string">r'^\(*\d+(\.\d+)?((\+|\*|/|-)\(*\d+(\.\d+)?\)*)*(\+|\*|/|-)\d+(\.\d+)?\)*$'</span></span><br><span class="line">res = re.match(pattern, strs)</span><br><span class="line"><span class="comment"># match是从头开始匹配，这里需要完全匹配，所以如果匹配成功的话，应该是endpos等于字符串长度</span></span><br><span class="line"><span class="keyword">if</span> res.endpos == len(strs): </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>再结合括号匹配的结果，则可以得到算式是否符合规范</p><h2 id="中缀式转前缀式"><a href="#中缀式转前缀式" class="headerlink" title="中缀式转前缀式"></a>中缀式转前缀式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>前缀式又称为逆波兰式，前缀式的表达式位于操作数之前，如下：</p><blockquote><p>‘+’, 1, ‘-‘, ‘*’, ‘+’, 32.34, 3, 4, 5</p></blockquote><h3 id="前缀式表达式求值"><a href="#前缀式表达式求值" class="headerlink" title="前缀式表达式求值"></a>前缀式表达式求值</h3><p>前缀式求值过程如下：</p><blockquote><ol><li>从右至左扫描算式</li><li>遇到数字时，将数字压入堆栈，</li><li>遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素在前，次顶元素在后），并将计算结果入栈；</li><li>重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。</li></ol></blockquote><h3 id="中缀式转前缀式-1"><a href="#中缀式转前缀式-1" class="headerlink" title="中缀式转前缀式"></a>中缀式转前缀式</h3><blockquote><ol><li>初始化两个栈:运算符栈s1，储存中间结果的栈s2，记录连续数个数的inflag=0，以及记录是否出现过小数的decimalflag=0</li><li>从右至左扫描中缀表达式</li><li>遇到操作数时，<br>3.1.若intflag和decimalflag均为0时，则直接入栈，intflag++<br>3.2.若intflag=0，decimalflag=1，则s2出栈后加上当前操作数后再入栈<br>3.3.若intflag&gt;0,则s2出栈后加上当前数字左移intflag位的值（即当前数乘以10的intflag次方）</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级，intflag和decimalflag置为0<br>4.1.如果s1为空，或栈顶运算符为右括号“)”，则直接将此运算符入栈<br>4.2.否则，若优先级比栈顶运算符的较高或相等，也将运算符压入s1<br>4.3.否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较</li><li>遇到括号时<br>5.1.如果是右括号“)”，则直接压入s1<br>5.2.如果是左括号“(”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到右括号为止，此时将这一对括号丢弃</li><li>遇到小数点时，将decimalflag置为1，并将当前栈顶的数字右移intflag位后入栈</li><li>重复步骤2至5，直到表达式的最左边</li><li>将s1中剩余的运算符依次弹出并压入s2</li><li>依次弹出s2中的元素并输出，结果即为中缀表达式对应的前缀表达式</li></ol></blockquote><h2 id="中缀式转后缀式"><a href="#中缀式转后缀式" class="headerlink" title="中缀式转后缀式"></a>中缀式转后缀式</h2><h3 id="后缀式求值"><a href="#后缀式求值" class="headerlink" title="后缀式求值"></a>后缀式求值</h3><blockquote><ol><li>从左向右扫描算式</li><li>遇到数字时，将数字压入堆栈，</li><li>遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素在后，次顶元素在前），并将计算结果入栈；</li><li>重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。</li></ol></blockquote><h3 id="中缀式转后缀式-1"><a href="#中缀式转后缀式-1" class="headerlink" title="中缀式转后缀式"></a>中缀式转后缀式</h3><blockquote><ol><li>初始化两个栈：运算符栈s1和储存中间结果的栈s2，记录连续数个数的inflag=0，以及记录是否出现过小数的decimalflag=0</li><li>从左至右扫描中缀表达式；</li><li>遇到操作数时，<br>3.1.若intflag和decimalflag均为0时，则直接入栈s2，intflag++<br>3.2.若intflag=0，则将当前数入栈<br>3.3.若intflag&gt;0并且decimalflag=0，则将s2栈顶元素左移一位加上当前数后入栈<br>3.4.若intflag&gt;0并且decimalflag=1，则将s2栈顶元素出栈后加上当前数右移intflag位后入栈</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级：<br>4.1如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；<br>4.2否则，若优先级比栈顶运算符的高，也将运算符压入s1（注意转换为前缀表达式时是优先级较高或相同，而这里则不包括相同的情况）；<br>4.3否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</li><li>遇到括号时：<br>5.1如果是左括号“(”，则直接压入s1；<br>5.2如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃；<br>5.3重复步骤2至5，直到表达式的最右边；</li><li>遇到小数点时，记录decimalflag=1；</li><li>将s1中剩余的运算符依次弹出并压入s2；</li><li>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</li></ol></blockquote><h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><h3 id="中缀式转前缀式-2"><a href="#中缀式转前缀式-2" class="headerlink" title="中缀式转前缀式"></a>中缀式转前缀式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Infix2Prefix</span><span class="params">(self, infixstrs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param strs: 中缀式算式</span></span><br><span class="line"><span class="string">    :return: 转换后的前缀式</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    infixstrs = infixstrs.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">    stack1 = []</span><br><span class="line">    stack2 = []</span><br><span class="line">    <span class="keyword">if</span> self.isFormula(infixstrs) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"请输入正确格式的算式！！！"</span>)</span><br><span class="line">    infixstrs = infixstrs.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    intflag = <span class="number">0</span></span><br><span class="line">    decimalflag = <span class="number">0</span></span><br><span class="line">    strs = infixstrs[::<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strs:</span><br><span class="line">        <span class="keyword">if</span> i.isdigit() <span class="keyword">or</span> self.Operator[i] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i.isdigit() <span class="keyword">is</span> <span class="literal">False</span> <span class="keyword">and</span> self.Operator[i] == <span class="number">0</span>:</span><br><span class="line">                decpart = stack2.pop()</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(intflag):</span><br><span class="line">                   decpart = decpart/<span class="number">10</span></span><br><span class="line">                stack2.append(decpart)</span><br><span class="line">                decimalflag = <span class="number">1</span></span><br><span class="line">                intflag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> intflag == <span class="number">0</span> <span class="keyword">and</span> decimalflag == <span class="number">0</span>:</span><br><span class="line">                    stack2.append(int(i))</span><br><span class="line">                <span class="keyword">elif</span> intflag == <span class="number">0</span> <span class="keyword">and</span> decimalflag == <span class="number">1</span>:</span><br><span class="line">                    stack2.append(stack2.pop() + int(i))</span><br><span class="line">                <span class="keyword">elif</span> intflag &gt; <span class="number">0</span> :</span><br><span class="line">                    dec = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(intflag):</span><br><span class="line">                        dec = <span class="number">10</span> * dec</span><br><span class="line">                    stack2.append(stack2.pop() + int(i) * dec)</span><br><span class="line">                intflag = intflag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            intflag = <span class="number">0</span></span><br><span class="line">            decimalflag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> len(stack1) == <span class="number">0</span>  <span class="keyword">or</span> self.Operator[i] == <span class="number">3</span>:</span><br><span class="line">                stack1.append(i)</span><br><span class="line">            <span class="keyword">elif</span> self.Operator[i] == <span class="number">4</span>:</span><br><span class="line">                length = len(stack1)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span><br><span class="line">                    temp = stack1.pop()</span><br><span class="line">                    <span class="keyword">if</span> self.Operator[temp] == <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    stack2.append(temp)</span><br><span class="line">            <span class="keyword">elif</span> self.Operator[i] == <span class="number">1</span> <span class="keyword">or</span> self.Operator[i] == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> self.Operator[stack1[<span class="number">-1</span>]] == <span class="number">3</span>:</span><br><span class="line">                    stack1.append(i)</span><br><span class="line">                <span class="keyword">elif</span> self.Operator[stack1[<span class="number">-1</span>]] &lt;= self.Operator[i] :</span><br><span class="line">                    length = len(stack1)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span><br><span class="line">                        <span class="keyword">if</span> len(stack1) == <span class="number">0</span> <span class="keyword">or</span> self.Operator[stack1[<span class="number">-1</span>]] &gt; self.Operator[i]:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        temp = stack1.pop()</span><br><span class="line">                        stack2.append(temp)</span><br><span class="line">                    stack1.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack1.append(i)</span><br><span class="line">    <span class="keyword">while</span> len(stack1)&gt;<span class="number">0</span>:</span><br><span class="line">        stack2.append(stack1.pop())</span><br><span class="line">    result = stack2</span><br><span class="line">    result.reverse()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="中缀式转后缀式-2"><a href="#中缀式转后缀式-2" class="headerlink" title="中缀式转后缀式"></a>中缀式转后缀式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Infix2Suffix</span><span class="params">(self, infixstrs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param infixstrs: 中缀式算式</span></span><br><span class="line"><span class="string">    :return: 转换后的后缀式</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    infixstrs = infixstrs.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    stack1 = []</span><br><span class="line">    stack2 = []</span><br><span class="line">    <span class="keyword">if</span> self.isFormula(infixstrs) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"请输入正确格式的算式！！！"</span>)</span><br><span class="line">    <span class="comment"># 用来标识是否是连续的数字或者小数点</span></span><br><span class="line">    intflag = <span class="number">0</span></span><br><span class="line">    decimalflag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> infixstrs:</span><br><span class="line">        <span class="keyword">if</span> i.isdigit() <span class="keyword">or</span> self.Operator[i] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i.isdigit() <span class="keyword">is</span> <span class="literal">False</span> <span class="keyword">and</span> self.Operator[i] == <span class="number">0</span>:</span><br><span class="line">                intflag = <span class="number">0</span></span><br><span class="line">                decimalflag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> intflag == <span class="number">0</span>:</span><br><span class="line">                stack2.append(int(i))</span><br><span class="line">            <span class="keyword">elif</span> decimalflag == <span class="number">0</span> <span class="keyword">and</span> intflag &gt; <span class="number">0</span>:</span><br><span class="line">                stack2.append(stack2.pop()*<span class="number">10</span> + int(i))</span><br><span class="line">            <span class="keyword">elif</span> decimalflag == <span class="number">1</span> <span class="keyword">and</span> intflag &gt; <span class="number">0</span>:</span><br><span class="line">                prepart = stack2.pop()</span><br><span class="line">                endpart = int(i)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(intflag):</span><br><span class="line">                    endpart = endpart/<span class="number">10</span></span><br><span class="line">                stack2.append(prepart + endpart)</span><br><span class="line">            intflag = intflag + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            intflag = <span class="number">0</span></span><br><span class="line">            decimalflag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> len(stack1) == <span class="number">0</span> <span class="keyword">or</span> self.Operator[i] == <span class="number">4</span>:</span><br><span class="line">                stack1.append(i)</span><br><span class="line">            <span class="keyword">elif</span> self.Operator[i] == <span class="number">3</span>:</span><br><span class="line">                length = len(stack1)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span><br><span class="line">                    temp = stack1.pop()</span><br><span class="line">                    <span class="keyword">if</span> self.Operator[temp] == <span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    stack2.append(temp)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> self.Operator[i] == <span class="number">1</span> <span class="keyword">or</span> self.Operator[i] == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> self.Operator[stack1[<span class="number">-1</span>]] == <span class="number">4</span>:</span><br><span class="line">                    stack1.append(i)</span><br><span class="line">                <span class="keyword">elif</span> self.Operator[stack1[<span class="number">-1</span>]] &gt;= self.Operator[i]:</span><br><span class="line">                    length = len(stack1)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span><br><span class="line">                        <span class="keyword">if</span> len(stack1) == <span class="number">0</span> <span class="keyword">or</span> self.Operator[stack1[<span class="number">-1</span>]] &lt; self.Operator[i]:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        temp = stack1.pop()</span><br><span class="line">                        stack2.append(temp)</span><br><span class="line">                    stack1.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack1.append(i)</span><br><span class="line">    <span class="keyword">while</span> len(stack1)&gt;<span class="number">0</span>:</span><br><span class="line">        stack2.append(stack1.pop())</span><br><span class="line">    result = stack2</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="算式的计算"><a href="#算式的计算" class="headerlink" title="算式的计算"></a>算式的计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, strs, is_Prefix=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        根据转换后的式子计算最终的结果</span></span><br><span class="line"><span class="string">    :param strs:</span></span><br><span class="line"><span class="string">    :param is_Suffix: 是否是后缀式</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">if</span> is_Prefix:</span><br><span class="line">        strs = strs[::<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strs :</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> self.Operator.keys():</span><br><span class="line">            operandA = result.pop()</span><br><span class="line">            operandB = result.pop()</span><br><span class="line">            <span class="keyword">if</span> is_Prefix:</span><br><span class="line">                calres = self.operate(operandA, operandB, i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                calres = self.operate(operandB, operandA, i)</span><br><span class="line">            result.append(calres)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xdthesun/Calculator.git" target="_blank" rel="noopener">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】Python测试框架doctest</title>
      <link href="/2019/01/10/%E3%80%90%E8%BD%AC%E3%80%91Python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6doctest/"/>
      <url>/2019/01/10/%E3%80%90%E8%BD%AC%E3%80%91Python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6doctest/</url>
      
        <content type="html"><![CDATA[<p>doctest是python自带的一个模块。本博客将介绍doctest的两种使用方式：一种是嵌入到python源码中，另外一种是放到一个独立文件。</p><h2 id="doctest-的概念模型"><a href="#doctest-的概念模型" class="headerlink" title="doctest 的概念模型"></a>doctest 的概念模型</h2><p>在python的官方文档中，对doctest是这样介绍的：</p><blockquote><p>doctest模块会搜索那些看起来像是python交互式会话中的代码片段，然后尝试执行并验证结果。</p></blockquote><p>类似于docstring编写的注释：<a href="http://www.maixj.net/ict/python-docstring-16247" target="_blank" rel="noopener">http://www.maixj.net/ict/python-docstring-16247</a><br>doctest的编写过程就像你在一个交互式shell中导入了一个被测试模块，然后一条一条执行被测试模块里面的函数一样。其实实际上doctest也是这么编写的，写好一个模块之后，在shell中测试这个模块里面的函数，将shell会话中的内容复制粘贴成doctest用例。</p><h2 id="doctest嵌入源码中"><a href="#doctest嵌入源码中" class="headerlink" title="doctest嵌入源码中"></a>doctest嵌入源码中</h2><p>下面的模块只有一个函数，里面嵌入了两个doctest测试用例，unnecessary_math.py:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">这个例子展示如何在源码中嵌入doctest用例。</span></span><br><span class="line"><span class="string">'</span>&gt;&gt;&gt;<span class="string">' 开头的行就是doctest测试用例。</span></span><br><span class="line"><span class="string">不带 '</span>&gt;&gt;&gt;<span class="string">' 的行就是测试用例的输出。</span></span><br><span class="line"><span class="string">如果实际运行的结果与期望的结果不一致，就标记为测试失败。</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span> </span><br><span class="line">def multiply(a, b):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(4, 3)</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply('a', 3)</span></span><br><span class="line"><span class="string">    'aaa'</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    <span class="built_in">return</span> a * b</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    import doctest</span><br><span class="line">    doctest.testmod(verbose=True)</span><br><span class="line">``` </span><br><span class="line">有两个地方可以放doctest测试用例，一个位置是模块的最开头，另一个位置是函数声明语句的下一行（就像上面的例子这样）。除此之外的其它地方不能放，放了也不会执行。</span><br><span class="line">那个verbose参数，如果设置为True则在执行测试的时候会输出详细信息。默认是False，表示运行测试时，只有失败的用例会输出详细信息，成功的测试用例不会输入任何信息。执行</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">python unnecessary_math.py</span><br></pre></td></tr></table></figure><p>得到输出结果是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">liuchunmings-MacBook-Pro:exersice liuchunming$ python unnecessary_math.py</span><br><span class="line">Trying:</span><br><span class="line">    multiply(4, 3)</span><br><span class="line">Expecting:</span><br><span class="line">    12</span><br><span class="line">ok</span><br><span class="line">Trying:</span><br><span class="line">    multiply(<span class="string">'a'</span>, 3)</span><br><span class="line">Expecting:</span><br><span class="line">    <span class="string">'aaa'</span></span><br><span class="line">ok</span><br><span class="line">1 items had no tests:</span><br><span class="line">    __main__</span><br><span class="line">1 items passed all tests:</span><br><span class="line">   2 tests <span class="keyword">in</span> __main__.multiply</span><br><span class="line">2 tests <span class="keyword">in</span> 2 items.</span><br><span class="line">2 passed and 0 failed.</span><br><span class="line">Test passed.</span><br></pre></td></tr></table></figure><p>上面启动测试的方式是在<strong>main</strong>函数中调用了doctest.testmod()方法。如果<strong>main</strong>函数有其他用途，不方便调用doctest.testmod()方法，那么可以用另外一种执行测试的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -m doctest unnecessary_math.py </span><br><span class="line">$ python -m doctest -v unnecessary_math.py</span><br></pre></td></tr></table></figure><p>这里 -m 表示引用一个模块，-v 等价于 verbose=True。运行输出与上面基本一样。</p><h2 id="doctest独立文件"><a href="#doctest独立文件" class="headerlink" title="doctest独立文件"></a>doctest独立文件</h2><p>如果不想将doctest测试用例嵌入到python的源码中，则可以建立一个独立的文本文件来保存测试用例。<br>将doctest测试用例从上面的python源码中剥离出来放到test_unnecessary_math.txt文件里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这个例子展示如何将doctest用例放到一个独立的文件中。</span><br><span class="line"><span class="string">'&gt;&gt;&gt;'</span> 开头的行就是doctest测试用例。</span><br><span class="line">不带 <span class="string">'&gt;&gt;&gt;'</span> 的行就是测试用例的输出。</span><br><span class="line">如果实际运行的结果与期望的结果不一致，就标记为测试失败。 </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from unnecessary_math import multiply</span><br><span class="line">&gt;&gt;&gt; multiply(3, 4)</span><br><span class="line">12</span><br><span class="line">&gt;&gt;&gt; multiply(<span class="string">'a'</span>, 3)</span><br><span class="line"><span class="string">'aaa'</span></span><br></pre></td></tr></table></figure><p>注意：from 那一行也要以&gt;&gt;&gt;开头。<br>在系统的shell中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m doctest -v test_unnecessary_math.txt</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/liuchunming033/article/details/51455663" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元旦雾淞岛-雪乡-雪谷游</title>
      <link href="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/"/>
      <url>/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h4><ul><li>帽子：能挡住耳朵最佳，也有一种可以只露出眼睛的那种</li><li>棉服：一定要能挡风且保暖才行，里面穿一件保暖衣即可，方便进屋脱掉外套(屋里太热)</li><li>棉裤：挡风且保暖，最好是买户外款或者其他不进水的</li><li>鞋子：长筒雪地靴最佳，高帮马丁靴也很不错，如果鞋帮比较低的话，建议买雪套，防止踩雪的时候雪进入鞋子里</li><li>手套：买滑雪手套就行，挡风不会湿最佳</li><li>保温杯：普通大小即可，建议每次装水时冷热参半，确保杯子里的水可随时饮用</li><li>冰爪：如果鞋子防滑性比较好，可以不用买，否则穿越时必带冰爪。</li><li>其他：暖宝宝、防冻伤药、护目镜、厚袜子等酌情自带<br>&emsp;总体来说所有的设备都要以挡风保暖为主，上身三层、腿上三层，脚上和头上各两层，再带点暖宝宝以备不时之需</li></ul><p>&emsp;游览路线：北京–吉林 –雾淞岛–雪乡–林海雪原–雪谷–吉林–北京<br>&emsp;整个行程总共需3天</p><h5 id="Day1"><a href="#Day1" class="headerlink" title="Day1:"></a>Day1:</h5><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/1.png" class=""><p>&emsp;从北京坐z117到吉林站，吉林站坐大巴到雾淞岛，全程大约1个小时多，雾淞岛因雾凇而闻名，主要由于不冻的松花江腾起的水汽，冻结在岛上的树枝上而形成，和日出一样，能否看到雾凇也要看天气是否适合形成，很可惜我们过去的那天并没有看到。ps：其实吉林火车站就在松花江旁边，可以先在火车站的江边看看有没有雾凇，如果有的话再去雾淞岛。</p><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/2.jpg" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/3.jpg" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/4.png" class=""><p>&emsp;大约早上10点半从雾淞岛离开，前往雪乡，全程大概6小时（具体依路面情况而定）。<br>雪乡位于黑龙江省牡丹江市大海林林业局境内的双峰林场，因独特的气候，全年雪期长。到雪乡时已是下午5点多，天已经黑了，雪乡景区门口换乘景区摆渡车到住处，我们过去时住在雪乡最繁华的雪韵大街边的龙门客栈，都是提前团好的住宿包含早餐和晚餐，老板人也不错。屋内特别暖和，不是传统的火炕，同行的小伙伴好多都因为热而没有休息好，建议要去的小伙伴在屋子里一定要多喝水，防止出现因干燥引起的身体不适 。<br>&emsp;放好行李，吃完晚餐后走到雪韵大街，雪韵大街旁有个栈道，绕栈道可以爬上山，俯瞰雪韵大街上的夜色。下了栈道，路边有拍拨水成冰，60元一次，老板忽悠我们说是水里加了干冰，其实只是普通的热水，后来我们自己找热水玩了，也拍出了很不错的效果。街道上有邮局、特产店、二人转表演等，街边的冻草莓、冰糖葫芦等，不建议买，咬起来已经没啥味道了，在街上消费时一定要谨慎，小心被宰。</p><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/5.JPG" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/6.JPG" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/7.JPG" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/8.jpg" class=""><h5 id="Day2："><a href="#Day2：" class="headerlink" title="Day2："></a>Day2：</h5><p>&emsp;早上8点，在雪乡吃完早餐后沿徒步路线前往雪谷，从双峰林场途径羊草山前往东升林场，全程大概15公里，前5公里全是上坡，但是坡度比较平缓，羊草山在山顶，风比较大些，羊草上上有个离开雪乡的游客中心，大概休息1小时后离开游客中心进入东升林场，一路全是下坡且路面比较滑，稍有不慎容易摔倒（有冰爪会好很多）。</p><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/9.jpg" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/10.JPG" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/11.JPG" class=""><p>&emsp;从雪乡到雪谷穿越大概6小时，到雪乡时已经是下午3点多，不过由于时差，天已经快要黑了。大家收拾到住处简单收拾一下，稍作休息后就去吃饭了，因为恰逢元旦，大家一起包饺子，很是欢乐。我们吃饭那家店的老板娘脾气贼暴躁，一句话不对就开始巴拉巴拉怼。<br>吃完饭后参加了篝火晚会，平时不怎么放的开的我，也被大家的热情感染，加入大家撒开玩，回到住处后大家各种组局玩，狼人杀、麻将等，本来大家都是在客厅玩的，晚上11点多，老板娘就开始赶我们去睡觉了，因为我们吵到他们睡觉了，哈哈哈</p><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/12.JPG" class=""><h5 id="Day3："><a href="#Day3：" class="headerlink" title="Day3："></a>Day3：</h5><p>&emsp;早上7点吃完早餐后坐大巴离开雪谷，前往吉林，到吉林大概是下午1点左右，因为好些小伙伴火车是晚上9点的，我们又一起组队去吃了东北的铁锅炖，在松花江边散步、吉林大桥吹风，也去了吉林天主教堂拍照，一直玩到晚上8点多。</p><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/13.jpg" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/14.JPG" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/15.JPG" class=""><img src="/2019/01/06/%E5%85%83%E6%97%A6%E9%9B%BE%E6%B7%9E%E5%B2%9B-%E9%9B%AA%E4%B9%A1-%E9%9B%AA%E8%B0%B7%E6%B8%B8/16.JPG" class=""><p>&emsp;总体来说是一次很不错的旅行体验，见证了不一样的爱情、结识了一群有爱的小伙伴，希望在新的一年里能够再次一起旅行。</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
            <tag> 雪乡 </tag>
            
            <tag> 雪谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用sphnix生成python文档</title>
      <link href="/2018/12/25/%E4%BD%BF%E7%94%A8sphnix%E7%94%9F%E6%88%90python%E6%96%87%E6%A1%A3/"/>
      <url>/2018/12/25/%E4%BD%BF%E7%94%A8sphnix%E7%94%9F%E6%88%90python%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>如何使用sphinx生成python代码文档</p><p>安装sphinx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sphinx</span><br></pre></td></tr></table></figure><p>新建文件结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--Project</span><br><span class="line">  --code    用来存放源代码</span><br></pre></td></tr></table></figure><p>进入Project后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sphinx-quickstart doc</span><br></pre></td></tr></table></figure><p>会显示如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[~/Documents/PlayPython/Project]$ sphinx-quickstart doc         </span><br><span class="line">Welcome to the Sphinx 1.8.2 quickstart utility.</span><br><span class="line">Please enter values <span class="keyword">for</span> the following settings (just press Enter to</span><br><span class="line">accept a default value, <span class="keyword">if</span> one is given <span class="keyword">in</span> brackets).</span><br><span class="line">Selected root path: doc</span><br><span class="line">You have two options <span class="keyword">for</span> placing the build directory <span class="keyword">for</span> Sphinx output.</span><br><span class="line">Either, you use a directory <span class="string">"_build"</span> within the root path, or you separate</span><br><span class="line"><span class="string">"source"</span> and <span class="string">"build"</span> directories within the root path.</span><br><span class="line">&gt; Separate <span class="built_in">source</span> and build directories (y/n) [n]: y</span><br><span class="line">Inside the root directory, two more directories will be created; <span class="string">"_templates"</span></span><br><span class="line"><span class="keyword">for</span> custom HTML templates and <span class="string">"_static"</span> <span class="keyword">for</span> custom stylesheets and other static</span><br><span class="line">files. You can enter another prefix (such as <span class="string">"."</span>) to replace the underscore.</span><br><span class="line">&gt; Name prefix <span class="keyword">for</span> templates and static dir [_]: _</span><br><span class="line">The project name will occur <span class="keyword">in</span> several places <span class="keyword">in</span> the built documentation.</span><br><span class="line">&gt; Project name: 身份证号和银行卡号生成器</span><br><span class="line">&gt; Author name(s): xdthesun</span><br><span class="line">&gt; Project release []: 0.1</span><br><span class="line">If the documents are to be written <span class="keyword">in</span> a language other than English,</span><br><span class="line">you can select a language here by its language code. Sphinx will <span class="keyword">then</span></span><br><span class="line">translate text that it generates into that language.</span><br><span class="line">For a list of supported codes, see</span><br><span class="line">http://sphinx-doc.org/config.html<span class="comment">#confval-language.</span></span><br><span class="line">&gt; Project language [en]: zh_CN</span><br><span class="line">The file name suffix <span class="keyword">for</span> <span class="built_in">source</span> files. Commonly, this is either <span class="string">".txt"</span></span><br><span class="line">or <span class="string">".rst"</span>.  Only files with this suffix are considered documents.</span><br><span class="line">&gt; Source file suffix [.rst]: </span><br><span class="line">One document is special <span class="keyword">in</span> that it is considered the top node of the</span><br><span class="line"><span class="string">"contents tree"</span>, that is, it is the root of the hierarchical structure</span><br><span class="line">of the documents. Normally, this is <span class="string">"index"</span>, but <span class="keyword">if</span> your <span class="string">"index"</span></span><br><span class="line">document is a custom template, you can also <span class="built_in">set</span> this to another filename.</span><br><span class="line">&gt; Name of your master document (without suffix) [index]: </span><br><span class="line">Indicate <span class="built_in">which</span> of the following Sphinx extensions should be enabled:</span><br><span class="line">&gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y</span><br><span class="line">&gt; doctest: automatically <span class="built_in">test</span> code snippets <span class="keyword">in</span> doctest blocks (y/n) [n]: y</span><br><span class="line">&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]: y</span><br><span class="line">&gt; todo: write <span class="string">"todo"</span> entries that can be shown or hidden on build (y/n) [n]: y</span><br><span class="line">&gt; coverage: checks <span class="keyword">for</span> documentation coverage (y/n) [n]: y</span><br><span class="line">&gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]: y</span><br><span class="line">&gt; mathjax: include math, rendered <span class="keyword">in</span> the browser by MathJax (y/n) [n]: y</span><br><span class="line">&gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]: y</span><br><span class="line">&gt; viewcode: include links to the <span class="built_in">source</span> code of documented Python objects (y/n) [n]: y</span><br><span class="line">&gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: y</span><br><span class="line">Note: imgmath and mathjax cannot be enabled at the same time. imgmath has been deselected.</span><br><span class="line">A Makefile and a Windows <span class="built_in">command</span> file can be generated <span class="keyword">for</span> you so that you</span><br><span class="line">only have to run e.g. `make html<span class="string">' instead of invoking sphinx-build</span></span><br><span class="line"><span class="string">directly.</span></span><br><span class="line"><span class="string">&gt; Create Makefile? (y/n) [y]: y</span></span><br><span class="line"><span class="string">&gt; Create Windows command file? (y/n) [y]: y</span></span><br><span class="line"><span class="string">Creating file doc/source/conf.py.</span></span><br><span class="line"><span class="string">Creating file doc/source/index.rst.</span></span><br><span class="line"><span class="string">Creating file doc/Makefile.</span></span><br><span class="line"><span class="string">Creating file doc/make.bat.</span></span><br><span class="line"><span class="string">Finished: An initial directory structure has been created.</span></span><br><span class="line"><span class="string">You should now populate your master file doc/source/index.rst and create other documentation</span></span><br><span class="line"><span class="string">source files. Use the Makefile to build the docs, like so:</span></span><br><span class="line"><span class="string">   make builder</span></span><br><span class="line"><span class="string">where "builder" is one of the supported builders, e.g. html, latex or linkcheck.</span></span><br></pre></td></tr></table></figure><p>当前目录结构显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[~/Documents/PlayPython/Project]$ tree -L 3                           </span><br><span class="line">.</span><br><span class="line">├── code</span><br><span class="line">│   ├── <span class="keyword">function</span></span><br><span class="line">│   │   ├── BankCardNumber.py</span><br><span class="line">│   │   ├── IDNumber.py</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── json</span><br><span class="line">│   ├── main.py</span><br><span class="line">│   └── test.py</span><br><span class="line">└── doc</span><br><span class="line">    ├── Makefile</span><br><span class="line">    ├── build</span><br><span class="line">    └── <span class="built_in">source</span></span><br><span class="line">        ├── _static</span><br><span class="line">        ├── _templates</span><br><span class="line">        ├── conf.py</span><br><span class="line">        └── index.rst</span><br><span class="line">8 directories, 8 files</span><br></pre></td></tr></table></figure><p>其中code目录用来存放源码，doc目录存放用来生成文档的相关文件</p><p>进入doc/source/conf.py中修改15-17行：去掉注释，并修改为如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">sys.path.insert(0, os.path.abspath(<span class="string">'../../code'</span>))</span><br><span class="line"><span class="comment"># ../../code   源码所在的位置</span></span><br></pre></td></tr></table></figure><p>在Project目录下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[~/Documents/PlayPython/Project]$ sphinx-apidoc -o ./doc/<span class="built_in">source</span> ./code                                                    </span><br><span class="line">Creating file ./doc/<span class="built_in">source</span>/main.rst.</span><br><span class="line">Creating file ./doc/<span class="built_in">source</span>/test.rst.</span><br><span class="line">Creating file ./doc/<span class="built_in">source</span>/function.rst.</span><br><span class="line">Creating file ./doc/<span class="built_in">source</span>/modules.rst.</span><br></pre></td></tr></table></figure><p>进入doc目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[~/Documents/PlayPython/Project/doc]$ make html  </span><br><span class="line">正在运行的是 Sphinx v1.8.2</span><br><span class="line">正在加载翻译 [zh_CN]... 完成</span><br><span class="line">创建输出目录…</span><br><span class="line">loading intersphinx inventory from https://docs.python.org/objects.inv...</span><br><span class="line">intersphinx inventory has moved: https://docs.python.org/objects.inv -&gt; https://docs.python.org/3/objects.inv</span><br><span class="line">构建 [mo]：0 个 po 文件的目标文件已过期</span><br><span class="line">构建 [html]: 5 个源文件的目标文件已过期</span><br><span class="line">updating environment: 5 added, 0 changed, 0 removed</span><br><span class="line">最后一位结果： 4.. [100%] <span class="built_in">test</span>                                           </span><br><span class="line">查找当前已过期的文件……没有找到</span><br><span class="line">Pickle 序列化环境……完成</span><br><span class="line">检查一致性……/Users/xdthesun/Documents/PlayPython/Project/doc/<span class="built_in">source</span>/modules.rst: WARNING: document isn<span class="string">'t included in any toctree</span></span><br><span class="line"><span class="string">完成</span></span><br><span class="line"><span class="string">准备文档……完成</span></span><br><span class="line"><span class="string">写入输出……[ 20%] function                                                写入输出……[ 40%] index                                                  写入输出……[ 60%] main                                                   写入输出……[ 80%] modules                                                写入输出……[100%] test                                                    </span></span><br><span class="line"><span class="string">生成索引…… genindex py-modindex</span></span><br><span class="line"><span class="string">highlighting module code... [100%] function.IDNumber                   </span></span><br><span class="line"><span class="string">写入附加页面…… search</span></span><br><span class="line"><span class="string">复制静态文件……done</span></span><br><span class="line"><span class="string">复制额外文件……完成</span></span><br><span class="line"><span class="string">导出 Chinese (code: zh) 的搜索索引……完成</span></span><br><span class="line"><span class="string">导出对象清单……完成</span></span><br><span class="line"><span class="string">build 成功, 1 warning.</span></span><br><span class="line"><span class="string">HTML 页面保存在 build/html 目录。</span></span><br></pre></td></tr></table></figure><p>安装主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sphinx_rtd_theme</span><br></pre></td></tr></table></figure><p>安装成功后修改doc/source/conf.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html_theme = <span class="string">'sphinx_rtd_theme'</span></span><br></pre></td></tr></table></figure><p>在doc目录下再次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make html</span><br></pre></td></tr></table></figure><p>若有新增加.py文件，则需要删除build下的doctree和html文件夹下的所有内容以及source文件夹中的除index.rst以外的其他所有.rst文件<br>再次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sphinx-apidoc -o ./doc/<span class="built_in">source</span> ./code  </span><br><span class="line"><span class="built_in">cd</span> ProjectDoc</span><br><span class="line">make html</span><br><span class="line">``` </span><br><span class="line">若只是修改了现有的module，则可以只执行</span><br><span class="line">``` bash</span><br><span class="line">make html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sphinx </tag>
            
            <tag> python文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现银行卡号生成器</title>
      <link href="/2018/12/25/python%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/12/25/python%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-银行卡生成规则"><a href="#1-银行卡生成规则" class="headerlink" title="1. 银行卡生成规则"></a>1. 银行卡生成规则</h3><p>银行卡一般为16位或者19位，根据不同银行或者不同银行的不同卡种生成</p><img src="/2018/12/25/python%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E6%A0%BC%E5%BC%8F.png" class=""><h5 id="1-1-银行bin码"><a href="#1-1-银行bin码" class="headerlink" title="1.1. 银行bin码"></a>1.1. 银行bin码</h5><p>BIN号即银行标识代码，英文全称是 Bank Identification Number。BIN由6位数字表示，出现在卡号的前6位，由国际标准化组织(ISO)分配给各从事跨行转接交换的银行卡组织。国内常见银行的bin号如下：</p><img src="/2018/12/25/python%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/%E9%93%B6%E8%A1%8C%E5%8D%A1bin%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A1%A8.png" class=""><p>银行卡bin码不全为6位，其余见：<a href="https://github.com/xdthesun/GetInfomation/blob/master/function/json/%E9%93%B6%E8%A1%8Cbin%E7%A0%81%E9%9B%86%E5%90%88.xlsx" target="_blank" rel="noopener">银行卡bin码大全</a></p><h5 id="1-2-中间位"><a href="#1-2-中间位" class="headerlink" title="1.2. 中间位"></a>1.2. 中间位</h5><p>也是各个银行的自定义位，不同银行根据不同的规则生成，有些银行根据分行、支行等信息生成，也有的银行根据流水顺序生成</p><h5 id="1-3-校验位"><a href="#1-3-校验位" class="headerlink" title="1.3. 校验位"></a>1.3. 校验位</h5><p>根据LUHN算法生成，假如不包含校验码的字串为x，计算方法如下：<br>1.3.1. 从x的右边第1个数字开始，每隔一位乘以2<br>1.3.2. 把第一步中获得的乘积各位数相加得sum1<br>1.3.3. x中未乘2的各位数相加得sum2<br>1.3.4. sum=sum1+sum2，sum对10取模后得到m<br>1.3.5. 若n为0，则校验码为0，其余则为对应的10-n，即n对10得补数</p><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><p>不包含校验码的银行卡为6226634703308310<br>      1. 0<em>2=0，3</em>2=6，0<em>2=0，3</em>2=6，7<em>2=14，3</em>2=6，6<em>2=12，2</em>2=4<br>      2. sum1 = 0+6+0+6+(1+4)+6+(1+2)+4=30<br>      3. sum2 = 1+8+3+0+4+6+2+6=30<br>      4. sum=sum1+sum2=60<br>      5. sum%10 = 0，所以校验码为0</p><h3 id="2-python编码实现"><a href="#2-python编码实现" class="headerlink" title="2. python编码实现"></a>2. python编码实现</h3><h5 id="2-1-银行卡bin码生成"><a href="#2-1-银行卡bin码生成" class="headerlink" title="2.1. 银行卡bin码生成"></a>2.1. 银行卡bin码生成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBinNum</span><span class="params">(self, useRandom=True)</span>:</span></span><br><span class="line">        bankToBin = json.load(open(<span class="string">"function/json/banknametobin.json"</span>, encoding=<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="keyword">if</span> useRandom:</span><br><span class="line">            print(<span class="string">"随机生成一个银行bin号......"</span>)</span><br><span class="line">            tempBank = random.sample(bankToBin.keys(), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            self.binNum = bankToBin[tempBank]</span><br><span class="line">            <span class="keyword">return</span> self.binNum, tempBank</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"请选择银行："</span>)</span><br><span class="line">            bankList = list(bankToBin.keys())</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bankList)):</span><br><span class="line">                print(<span class="string">"%d.%s"</span> % (i, bankList[i]))</span><br><span class="line">            bankNum = input()</span><br><span class="line">            <span class="keyword">if</span> len(bankNum) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> self.getBinNum()</span><br><span class="line">            <span class="keyword">elif</span> int(bankNum) <span class="keyword">in</span> range(len(bankList)):</span><br><span class="line">                self.binNum = bankToBin[bankList[int(bankNum)]]</span><br><span class="line">                <span class="keyword">return</span> self.binNum, bankList[int(bankNum)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入有误，请重新输入:"</span>)</span><br><span class="line">               <span class="keyword">return</span> self.getBinNum(useRandom=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h5 id="2-2-中间位生成"><a href="#2-2-中间位生成" class="headerlink" title="2.2 中间位生成"></a>2.2 中间位生成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMidNum</span><span class="params">(self, useRandom=True)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> useRandom:</span><br><span class="line">            print(<span class="string">"默认生成一个16位的银行卡"</span>)</span><br><span class="line">            tempMidnum = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                tempMidnum = tempMidnum + str(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">                x = x</span><br><span class="line">            self.midNum = tempMidnum</span><br><span class="line">            <span class="keyword">return</span> self.midNum</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tempNum = input(<span class="string">"请输入要生成银行卡位数（16或19位）："</span>)</span><br><span class="line">            <span class="keyword">if</span> len(tempNum) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> self.getMidNum()</span><br><span class="line">            <span class="keyword">elif</span> int(tempNum) <span class="keyword">in</span> (<span class="number">16</span>, <span class="number">19</span>):</span><br><span class="line">                tempMidnum = <span class="string">""</span></span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> range(int(tempNum)<span class="number">-6</span><span class="number">-1</span>):</span><br><span class="line">                    tempMidnum = tempMidnum + str(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">                self.midNum = tempMidnum</span><br><span class="line">                <span class="keyword">return</span> self.midNum</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入有误，请重新输入:"</span>)</span><br><span class="line">                <span class="keyword">return</span> self.getMidNum(useRandom=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h5 id="2-3-校验码生成"><a href="#2-3-校验码生成" class="headerlink" title="2.3 校验码生成"></a>2.3 校验码生成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLastcode</span><span class="params">(self, bankNumNoLastcode)</span>:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> bankNumNoLastcode[<span class="number">-1</span>::<span class="number">-2</span>]:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> str(int(i)*<span class="number">2</span>):</span><br><span class="line">                sum = sum + int(m)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> bankNumNoLastcode[<span class="number">-2</span>::<span class="number">-2</span>]:</span><br><span class="line">            sum = sum + int(j)</span><br><span class="line">        <span class="keyword">if</span> sum % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            self.lastCode = <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.lastCode = str(<span class="number">10</span> - sum % <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> self.lastCode</span><br></pre></td></tr></table></figure><p>源码见：<a href="https://github.com/xdthesun/GetInfomation.git" target="_blank" rel="noopener">https://github.com/xdthesun/GetInfomation.git</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 银行卡号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现身份证号生成器</title>
      <link href="/2018/12/23/python%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/12/23/python%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>  最近开始接触金融相关的测试，发现在金融测试中身份证号是个很重要的数据，网上也有很多大佬自己写的身份证生成器，抱着学习的态度，花了两个晚上的时间用python写完了这个身份证号生成器</p><h2 id="1-身份证编码规则"><a href="#1-身份证编码规则" class="headerlink" title="1. 身份证编码规则"></a>1. 身份证编码规则</h2><img src="/2018/12/23/python%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%A0%BC%E5%BC%8F.png" class=""><h4 id="1-1-身份证地址码"><a href="#1-1-身份证地址码" class="headerlink" title="1.1. 身份证地址码"></a>1.1. 身份证地址码</h4><p>共6位，表示登记户口时所在地的行政区划代码（省、市、县），如下：</p><img src="/2018/12/23/python%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/%E5%9C%B0%E5%9D%80%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A1%A8.png" class=""><h4 id="1-2-出生年月日"><a href="#1-2-出生年月日" class="headerlink" title="1.2. 出生年月日"></a>1.2. 出生年月日</h4><p>共8位，表示该居民的出生年月日，年4位数字，月和日分别用2位数字表示，如19930211</p><h4 id="1-3-顺序码"><a href="#1-3-顺序码" class="headerlink" title="1.3. 顺序码"></a>1.3. 顺序码</h4><p>共3位，同一区域内同年同月同日生的人的顺序顺延，男生占偶数，女生占奇数，不足三位自动在前面补0，如某地区出生的第一位男生，则顺序码为002</p><h4 id="1-4-校验码"><a href="#1-4-校验码" class="headerlink" title="1.4. 校验码"></a>1.4. 校验码</h4><p>共1位，校验码前面17位为本体位，校验码根据本体位计算得到<br>    1.4.1. 本体位每位和对应的加权因子相乘并求和得sum<br>    1.4.2. sum对11取余<br>    1.4.3. 根据余数和校验码对应表得到最后的校验码值</p><h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4> <img src="/2018/12/23/python%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/%E5%8A%A0%E6%9D%83%E5%9B%A0%E5%AD%90%E8%A1%A8.png" class=""> <img src="/2018/12/23/python%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%94%9F%E6%88%90%E5%99%A8/%E6%A0%A1%E9%AA%8C%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A1%A8.png" class=""><p>举例：44180020130412122(不包含校验码)</p><blockquote><ol><li>sum = 4x7 + 4x9 + 1x10 + 8x5 + 0x8 + 0x4 + 2x2 + 0x1 + 1x6 + 3x3 + 0x7 + 4x9 + 1x10 + 2x5 + 1x8 + 2x4 +2x2 = 209   </li><li>对11取余得0</li><li>根据余数和校验码表得到对应值为1</li></ol></blockquote><p>tips：最后一位也可以根据m=12-sum%11得到，若x为10，则最后一位为X，否则为计算得到的m</p><h2 id="2-python编码"><a href="#2-python编码" class="headerlink" title="2. python编码"></a>2. python编码</h2><h4 id="2-1-身份证地址码生成"><a href="#2-1-身份证地址码生成" class="headerlink" title="2.1. 身份证地址码生成"></a>2.1. 身份证地址码生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAddressNum</span><span class="params">(self, useRandom=True)</span>:</span></span><br><span class="line">        <span class="comment"># 存储地址和地址码之间的对应</span></span><br><span class="line">        addressToNumber = json.load(open(<span class="string">"function/json/addresstonumber.json"</span>, encoding=<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 随机生成一个地址码</span></span><br><span class="line">        <span class="keyword">if</span> useRandom:</span><br><span class="line">            print(<span class="string">"随机生成一个地址码....."</span>)</span><br><span class="line">            tempAddress = random.sample(list(addressToNumber.keys()), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            self.addressNum = addressToNumber[tempAddress]</span><br><span class="line">            <span class="keyword">return</span> self.addressNum, tempAddress</span><br><span class="line">        <span class="comment"># 根据用户提供的信息</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            address = input(<span class="string">"请输入省份或城市：\n"</span>)</span><br><span class="line">            tempList = []</span><br><span class="line">            <span class="keyword">if</span> len(address) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> self.getAddressNum(useRandom=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> addressToNumber.keys():</span><br><span class="line">                <span class="keyword">if</span> address <span class="keyword">in</span> x:</span><br><span class="line">                    tempList.append(x)</span><br><span class="line">            <span class="keyword">if</span> len(tempList) == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的省份或城市未找打，请确认！"</span>)</span><br><span class="line">                <span class="keyword">return</span> self.getAddressNum(useRandom=<span class="literal">False</span>)</span><br><span class="line">            print(<span class="string">"请选择对应的城市:"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tempList)):</span><br><span class="line">                print(str(i) + <span class="string">"."</span> + tempList[i])</span><br><span class="line">            num = input(<span class="string">"请输入对应城市编号（默认则为随机选择以下任意一个城市）:"</span>)</span><br><span class="line">            <span class="keyword">if</span> len(num) == <span class="number">0</span>:</span><br><span class="line">                num = random.randint(<span class="number">0</span>, len(tempList))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num = int(num)</span><br><span class="line">            tempNumber = addressToNumber[tempList[num]]</span><br><span class="line">            self.addressNum = tempNumber</span><br><span class="line">            <span class="keyword">return</span> tempNumber, tempList[int(num)]</span><br></pre></td></tr></table></figure><h4 id="2-2-出生年月生成"><a href="#2-2-出生年月生成" class="headerlink" title="2.2. 出生年月生成"></a>2.2. 出生年月生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBirthdayNum</span><span class="params">(self, useRandom=True)</span>:</span></span><br><span class="line">        <span class="comment"># 随机生成一个年月日</span></span><br><span class="line">        <span class="keyword">if</span> useRandom:</span><br><span class="line">            print(<span class="string">"随机生成一个出生日期......"</span>)</span><br><span class="line">            startTime = int(time.mktime((<span class="number">1984</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">            endTime = int(time.time())</span><br><span class="line">            x = random.randrange(startTime, endTime)</span><br><span class="line">            date_touple = time.localtime(x)</span><br><span class="line">            date = time.strftime(<span class="string">"%Y%m%d"</span>, date_touple)</span><br><span class="line">            self.birthdayNum = date</span><br><span class="line">            <span class="keyword">return</span> date</span><br><span class="line">        <span class="comment"># 根据用户提供的信息</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            birthday = input(<span class="string">"请输8位生日（格式xxxxxxxx，如19930405）："</span>)</span><br><span class="line">            <span class="keyword">if</span> len(birthday) == <span class="number">0</span>:</span><br><span class="line">                self.birthdayNum = self.getBirthdayNum()</span><br><span class="line">                <span class="keyword">return</span> self.birthdayNum</span><br><span class="line">            <span class="keyword">elif</span> len(birthday) != <span class="number">8</span>:</span><br><span class="line">                print(<span class="string">"输入有误！"</span>)</span><br><span class="line">                self.birthdayNum = self.getBirthdayNum(useRandom=<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">return</span> self.birthdayNum</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.birthdayNum = birthday</span><br><span class="line">                <span class="keyword">return</span> self.birthdayNum</span><br></pre></td></tr></table></figure><h4 id="2-3-顺序码生成"><a href="#2-3-顺序码生成" class="headerlink" title="2.3. 顺序码生成"></a>2.3. 顺序码生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOrder</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = random.randint(<span class="number">0</span>, <span class="number">999</span>)</span><br><span class="line">        <span class="keyword">if</span> temp &lt; <span class="number">10</span>:</span><br><span class="line">            self.orderNum = <span class="string">'00'</span> + str(temp)</span><br><span class="line">            <span class="keyword">return</span> self.orderNum</span><br><span class="line">        <span class="keyword">elif</span> temp &lt; <span class="number">100</span>:</span><br><span class="line">            self.orderNum = <span class="string">'0'</span> + str(temp)</span><br><span class="line">            <span class="keyword">return</span> self.orderNum</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.orderNum = str(temp)</span><br><span class="line">            <span class="keyword">return</span> self.orderNum</span><br></pre></td></tr></table></figure><h4 id="2-4-校验码生成"><a href="#2-4-校验码生成" class="headerlink" title="2.4. 校验码生成"></a>2.4. 校验码生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLastCode</span><span class="params">(self, top17=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 加权因子</span></span><br><span class="line">        factorNumber = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> len(top17) == <span class="number">0</span>:</span><br><span class="line">            temp = self.addressNum + self.birthdayNum + self.orderNum</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = top17</span><br><span class="line">        lastcodetemp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(factorNumber, temp):</span><br><span class="line">            lastcodetemp = lastcodetemp + i * int(j)</span><br><span class="line">        lastcodetemp = <span class="number">12</span> - lastcodetemp</span><br><span class="line">        lastcode = <span class="string">'X'</span> <span class="keyword">if</span> lastcodetemp % <span class="number">11</span> == <span class="number">10</span> <span class="keyword">else</span> lastcodetemp % <span class="number">11</span></span><br><span class="line">        self.lastCode = str(lastcode)</span><br><span class="line">        <span class="keyword">return</span> lastcode</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xdthesun/GetInfomation/blob/master/function/IDNumber.py" target="_blank" rel="noopener">完整代码</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 身份证号生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组拆分 I</title>
      <link href="/2018/05/07/%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86I/"/>
      <url>/2018/05/07/%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86I/</url>
      
        <content type="html"><![CDATA[<h3 id="源题目"><a href="#源题目" class="headerlink" title="源题目"></a>源题目</h3><p>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。<br>示例 1:</p><blockquote><p> 输入: [1,4,3,2]</p><p>输出: 4<br>解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).</p></blockquote><p>提示:</p><blockquote><p> n 是正整数,范围在 [1, 10000].<br>数组中的元素范围在 [-10000, 10000].</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>求每对数中最小值之和为最大，则只需要在分割成不同对时，尽量让每对中最小值对最大值的影响最小，比如：</p><blockquote><p> 数组： [1,4,3,2]</p></blockquote><p>成对分隔，按照（1,2），（3,4）的方式分隔，每次求最小值时得到的值是较大的，这样总和也就是最大的<br>由上分析可得，先将数组排序，排序后在依次取相邻两个数的最小值求和，则得到所需结果。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>1）使用Java排序算法:leetcode可通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;  </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">           Arrays.sort(nums);</span><br><span class="line">           <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; nums.length; i=i+<span class="number">2</span>)&#123;</span><br><span class="line">           result = result + nums[i];</span><br><span class="line">           &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">       &#125; </span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure><p>2）冒泡排序：leetcode提示超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum2</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//自己写排序算法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">                    nums[i] = nums[j];</span><br><span class="line">                    nums[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length ;i = i+<span class="number">2</span>)&#123;</span><br><span class="line">            result += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/xdthesun/LeetCode.git" target="_blank" rel="noopener">完整源码</a> </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求两个数的汉明距离</title>
      <link href="/2018/04/27/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
      <url>/2018/04/27/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="1-源题目"><a href="#1-源题目" class="headerlink" title="1.源题目"></a>1.源题目</h5><p><a href="https://leetcode-cn.com/problems/hamming-distance/description/" target="_blank" rel="noopener">汉明距离</a></p><blockquote><p> The Hamming distance between two integers is the number of positions at which the corresponding bits are different.<br>Given two integers x and y, calculate the Hamming distance.<br>Note:0 ≤ x, y &lt; 231.<br>Example:</p><blockquote><p>Input: x = 1, y = 4<br>Output: 2</p></blockquote></blockquote><blockquote><p> Explanation:<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;↑&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;↑<br>The above arrows point to positions where the corresponding bits are different.</p></blockquote><h5 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h5><p>方法1.暴力求解:依次对比两个数的二进制位，出现不同则加1</p><blockquote><p> 1.一个数A左移一位后再右移一位得到A0<br>2.比较A和A0，如果A和A0相等，则说明A的二进制数的最后一位为0，否则为1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempX = x;</span><br><span class="line">        <span class="keyword">int</span> tempY = y;</span><br><span class="line">        <span class="keyword">while</span>(tempX != <span class="number">0</span> || tempY != <span class="number">0</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(tempX == (tempX&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tempY != (tempY&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                    result++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(tempY == (tempY&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                    result++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tempX = tempX&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            tempY = tempY&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Solution test = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(test.hammingDistance(<span class="number">4</span>, <span class="number">10</span>));       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2.通过二进制运算: 两个数异或后不同位为1，相同位的值为0，如x=1，y=4</p><blockquote><p> x^y = (001)^(100) = (101)</p></blockquote><p>n&amp;(n-1)则可使最后一位1变为0，计算出1的个数，即为汉明距离，解法见下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = x ^ y;</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="number">0</span>)&#123;</span><br><span class="line">            temp = temp&amp;(temp-<span class="number">1</span>);</span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Solution test = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(test.hammingDistance(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 完整代码<a href="https://gitee.com/xdthesun/LeetCode.git" target="_blank" rel="noopener">HammingDistance</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu+hexo+码云搭建个人博客</title>
      <link href="/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境介绍"><a href="#一、环境介绍" class="headerlink" title="一、环境介绍"></a>一、环境介绍</h3><p>1.系统平台：ubuntu18.05<br>2.服务器：<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a><br>3.静态博客生成工具：<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></p><h3 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h3><p>1.安装hexo前，需要先安装node.js</p><blockquote><p> sudo add-apt-repository ppa:chris-lea/node.js<br>sudo apt-get update<br>sudo apt-get install nodejs</p></blockquote><p>安装后执行如下命令</p><blockquote><p> npm -v</p></blockquote><p>输出如下内容则表示安装成功</p><blockquote><p> 5.6.0 或者其他版本号</p></blockquote><p>2.通过npm安装hexo</p><blockquote><p> npm install hexo -g</p></blockquote><p>若出现权限拒绝，无法执行的提示，则按照以下步骤执行</p><blockquote><p> sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}<br>npm install hexo -g</p></blockquote><p>检查hexo是否安装成功</p><blockquote><p>hexo -v</p></blockquote><p>出现类似如下内容，则表示安装成功</p><blockquote><p> hexo: 3.7.1<br>hexo-cli: 1.1.0<br>os: Linux 4.15.0-15-generic linux x64<br>http_parser: 2.8.0<br>node: 8.11.1<br>v8: 6.2.414.50<br>uv: 1.19.1<br>zlib: 1.2.11<br>ares: 1.10.1-DEV<br>modules: 57<br>nghttp2: 1.25.0<br>openssl: 1.0.2o<br>icu: 60.1<br>unicode: 10.0<br>cldr: 32.0<br>tz: 2017c</p></blockquote><p>3.初始化配置到本地<br>新建本地文件并进入对应目录</p><blockquote><p> mkdir yourblogfile<br> cd yourblogfile  </p></blockquote><p>初始化hexo</p><blockquote><p> hexo init<br> npm install<br> hexo g    </p></blockquote><p>启动hexo本地服务</p><blockquote><p> hexo s</p></blockquote><p>输出如下：</p><blockquote><p> INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop.</p></blockquote><p>点击 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  则可看到如下已成功启动</p><img src="/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_home_page.jpg" class="" title="hexo默认界面"><h3 id="三、将本地文件配置到码云"><a href="#三、将本地文件配置到码云" class="headerlink" title="三、将本地文件配置到码云"></a>三、将本地文件配置到码云</h3><p>1.在码云中新建项目<br>如新建项目 yourblogfile，记住项目路径</p><img src="/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/newproject.jpg" class="" title="新建项目"><img src="/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitpath.jpg" class="" title="git路径"><p>2.hexo中配置git</p><blockquote><p> deploy:<br>    type: git<br>    repo: yourbloggit的路径<br>    branch: master</p></blockquote><p>3.将本地文件一键配置到服务器</p><blockquote><p> hexo -g d</p></blockquote><p>3.开启码云的page服务,并通过码云page访问</p><img src="/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/startpage.jpg" class="" title="新建page"><img src="/2018/04/26/ubuntu-hexo-%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/startserve.jpg" class="" title="启动服务"><p>以上！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地文件git提交到服码云</title>
      <link href="/2018/04/24/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6git%E6%8F%90%E4%BA%A4%E5%88%B0%E7%A0%81%E4%BA%91/"/>
      <url>/2018/04/24/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6git%E6%8F%90%E4%BA%A4%E5%88%B0%E7%A0%81%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<h3 id="本地文件git提交到码云上步骤："><a href="#本地文件git提交到码云上步骤：" class="headerlink" title="本地文件git提交到码云上步骤："></a>本地文件git提交到码云上步骤：</h3><h4 id="1-在服务器上新建项目"><a href="#1-在服务器上新建项目" class="headerlink" title="1.在服务器上新建项目"></a>1.在服务器上新建项目</h4><h4 id="2-在本地文件夹中初始化项目"><a href="#2-在本地文件夹中初始化项目" class="headerlink" title="2.在本地文件夹中初始化项目"></a>2.在本地文件夹中初始化项目</h4><blockquote><p> git init<br>  已初始化空的 Git 仓库于 /home/xxxxx/文档/MyBlog/xdthsun/.git/</p></blockquote><h4 id="3-提交修改到服务器"><a href="#3-提交修改到服务器" class="headerlink" title="3.提交修改到服务器"></a>3.提交修改到服务器</h4><blockquote><p> git add .<br>  git commit -m “修改记录”<br>  git remote add origin 服务器git地址<br>  git push origin master</p></blockquote><h4 id="若出现如下错误："><a href="#若出现如下错误：" class="headerlink" title="若出现如下错误："></a>若出现如下错误：</h4><blockquote><p> 提示：更新被拒绝，因为远程仓库包含您本地尚不存在的提交。这通常是因为另外<br>  提示：一个仓库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更<br>  提示：（如 ‘git pull …’）。<br>  提示：详见 ‘git push –help’ 中的 ‘Note about fast-forwards’ 小节。</p></blockquote><h4 id="手动执行："><a href="#手动执行：" class="headerlink" title="手动执行："></a>手动执行：</h4><blockquote><p> git pull –rebase origin master<br>   git push origin master</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/23/hello-world/"/>
      <url>/2018/04/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
